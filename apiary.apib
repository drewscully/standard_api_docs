FORMAT: 1A

HOST: https://api.letslynk.com/

# Lets Lynk API Documentation

## Introduction

LetsLynk API is based on REST principles, in order to use the api you need a Lets Lynk account. 
The following documentation covers core resources that are available to query the lets lynk 
system and manipulate data.

All API methods return expect to have parameters passsed as JSON and will return resources as JSON.
Please see specific examples for further detail.

### Allowed HTTP requests:

    POST   :   To create a resource
    PUT    :   To replace a resource
    GET    :   Get a resource or a list of resources
    DELETE :   To delete a resource

### Description of usual server responses

* `200 OK`- the request was successful
* `201 Created` - the request was successful and a resource was created
* `204 No Content` - the request was successful but there is no representation to return
* `400 Bad Request` - the request could not be understolld or was missing required parameters
* `401 Unauthorized` - authenication failed or the user doesn't have permissions for the requested operation
* `403 Forbidden` - access to the requested resource denied
* `404 Not Found` - the requested resource could not be found
* `409 Conflict` - the request could not be actioned as it would result in a conflict with another resource
* `500 Internal Server Error` - There was an uncaught exception in the api, please email `support@letslynk.com`

### Collections of Objects

Methods that return collections of objects can be specified to return a set ammount of objects from a set place. This is achieved using the start and limit URI parameters.

For example: `GET /users/1/activity?start=20&limit=10`

In the above example, the server will return up to 10 objects, starting from the 20th object. 
The json response will also include a hypermedia link to get the next set of objects (and the previous set, if applicable):

    {
        ...
        "_links":{
            "self": { "href": "/users/1/activity?start=20&limit=10" },
            "prev": { "href": "/users/1/activity?start=10&limit=10" },
            "next": { "href": "/users/1/activity?start=30&limit=10" }
        }
        ...
    }
If other uri parameters are set in a request, they will be carried through to the hypermedia links in the response. 

For example: `GET /users/1/contacts?start=20&limit=10&search=John&tag=1&tag=3`

    {
        ...
        "_links":{
            "self": { "href": "/users/1/contacts?start=20&limit=10&search=John&tag=1&tag=3" },
            "prev": { "href": "/users/1/contacts?start=10&limit=10&search=John&tag=1&tag=3" },
            "next": { "href": "/users/1/contacts?start=30&limit=10&search=John&tag=1&tag=3" }
        }
        ...
    }

## Endpoints

### Status [GET]
Get the API service status

+ Response 200 (application/json)

    + Body

        { 
            "status" : "OK", 
            "version": 1
        }


### Auth
With the exception of creaing an account, you must first auth against the server using the email address 
and password associated with your account in order to use the API.

Steps to authenticate:

1. `POST` your credentials (email and password) to __/auth__
2. __/auth__ will resond with a __token__
3. Pass the token back in subsequent requests in the Authorization Header using Basic 
authorization, for example:

`Authorization: Basic QkR6cFhHSHpnNkIyMk16bzlGNm1POWNKSTJpT0VSMWo1cnkxaERuUnN0RWdNVWZNcThYR1o4MTduUVRwTWZ4Qjo=`

Parameters:
* email (string): The users email address - __required__
* password (string): The users password - __required__

Response:
A successful response will contain a token to use in subsequent requests and a hypermedia link to the root and the user's self
of the API.

+ Request (application/json)

    + Body
    
        { 
            "email": "steven.segal@kickass.com", 
            "password": "imjustthecook" 
        }

+ Response 200 (application/json)

    + Body

        "token" : "QkR6cFhHSHpnNkIyMk16bzlGNm1POWNKSTJpT0VSMWo1cnkxaERuUnN0RWdNVWZNcThYR1o4MTduUVRwTWZ4Qjo=", 
        "_user_id" : 1,
        "_links": {
            "root": { "href": "/" },
            "self": { "href": "/users/{user_id}" }
        }


-- Auth > Forgot --
Supply the user email in the case of a forgotten/lost password. If the account is found then a password
reset link will be sent to the user email address.

Parameters:
* email (string): The users email address - __required__

Response:
A successful response will return no content. User should check their email to continue process.

POST /auth/forgot
> Content-Type: application/json
{ 
    "email": "steven.segal@kickass.com" 
}
< 200
< Content-Type: application/json
{
    "message": "Check your email"
}
+++++
< 404
< Content-Type: application/json
{
    "error": "The email specified could not be found"
}


-- Auth > Reset --
Supply the reset ID that was generated by the API and sent to the user's email address along with
a new password.

Parameters:
* reset_token (string): The unique code sent to the user's email address - __required__
* password (string): The new password chosen by the user - __required__

POST /auth/reset
> Content-Type: application/json
{ 
    "reset_token": "VM8DhE3aJ7PTgWQu6QSEvlKTmxdWk8s8v",
    "password": "this_is_a_very_poor_passphrase"
}
< 200
< Content-Type: application/json
{ 
    "message": "Password reset"
}
+++++
< 404
< Content-Type: application/json
{
    "error": "Password reset request not found"
}


-- Verify --
On account creation an email verification is automatically generated and sent to the users 
supplied email address.

Use this API to complete the verification process by supplying the verification_token within
2 hours of it's generation

Parameters:
* verification_token (string): The unique code sent to the user's email address - __required__

Response:
A successful response will contain a hypermedia link to login.

POST /verify
> Content-Type: application/json
{ 
    "verification_token": "VM8DhE3aJ7PTgWQu6QSEvlKTmxdWk8s8v"
}
< 200
< Content-Type: application/json
{ 
    "_links": {
        "auth": {
            "href": "/auth"
        }
    }
}


--
Verify > Send
Resends the verification email to a user.

Response:

A successful response will return no content.

--
Resend Verification

POST /verify/send
> Content-Type: application/json
{ 
    "email": "email@email.com"
}
< 204

--
Verify > Short Code
Verifies a user using thier short code. Short codes will always be 6 character alpha strings. They are case insensitive.

Note that the client must provide a valid auth token in the header to verify using the short code.

Use this API to complete the verification process by supplying the verification_token within 2 hours of it's generation
* verificationtoken (string): The unique code sent to the user's email address - _required
--

Verify a short code, for when a user chooses to verify by entering a code withing thier app

__Authentication:__ Required

__Authorization:__ None


POST /verify/short_code
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
  "verification_short_code": "abrppz"
}
< 204

--
User
The following is a section of resources related to users, four methods are available:

* Create a new user
* Retrieve an existing user
* Update an existing user
* Delete an existing user

### User Properties ###

* email (string)
* password (string)
* title (string)
* first_name (string)
* last_name (string)
* full_name (string)
* home_telephone (string)
* mobile_telephone (string)
* work_telephone (string)there 
* linked_in (string)
* facebook (string)
* twitter (string)
* google (string)
* company (string)
* job_title (string)
* address\_line_1 (string)
* address\_line_2 (string)
* address\_line_3 (string)
* address\_line_4 (string)
* locality (string)
* region (string)
* postcode (string)
* country (string)
* _qr_url (string) _read only_
* _avatar (string) _read only_
* _banner (string) _read only_

--
Create a new user account

__Authentication:__ Not required

__Authorization:__ Not required

POST /users
> Content-Type: application/json
{ 
    "email": "stevensegal@kickass.com",
    "password": "kickass",
    "title": "Mr",
    "first_name": "Steven",
    "last_name": "Segal",
    "home_telephone": "04444 123 456",
    "mobile_telephone": "05555 123 456",
    "work_telephone": "06666 123 456",
    "linked_in": "http://linked.in/steven_segal",
    "facebook": "http://facebook.com/stevan_segal",
    "twitter": "@steven_segal",
    "google": "+steven_segal",
    "company": "Kick Ass Ltd",
    "job_title": "Ass Kicker",
    "address_line_1": "Address 1",
    "address_line_2": "Address 2",
    "address_line_3": "Address 3",
    "address_line_4": "Address 4",
    "locality": "NY",
    "region": "NY",
    "postcode": "K1KA55",
    "country": "USA"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{ 
    "email": "stevensegal@kickass.com",
    "title": "Mr",
    "first_name": "Steven",
    "last_name": "Segal",
    "home_telephone": "04444 123 456",
    "mobile_telephone": "05555 123 456",
    "work_telephone": "06666 123 456",
    "linked_in": "http://linked.in/steven_segal",
    "facebook": "http://facebook.com/stevan_segal",
    "twitter": "@steven_segal",
    "google": "+steven_segal",
    "company": "Kick Ass Ltd",
    "job_title": "Ass Kicker",
    "address_line_1": "Address 1",
    "address_line_2": "Address 2",
    "address_line_3": "Address 3",
    "address_line_4": "Address 4",
    "locality": "NY",
    "region": "NY",
    "postcode": "K1KA55",
    "country": "USA",
    "_qr_url": "https://qr.letslynk.com/u/oO68mZwLTvi7bWu5vTgKEQ/Steven%20Segal",
    "_links": {
        "avatar": {
            "_links": {
                "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
            }
        },
        "banner": {
            "_links": {
                "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
            }
        },
        "self": { "href": "/users/{user_id}" },
        "activity": { "href": "/users/{user_id}/activity" },
        "contacts": { "href": "/users/{user_id}/contacts" },
        "invites": { "href": "/users/{user_id}/invites" },
        "goodie": { "href": "/users/{user_id}/goodie" },
        "registrations": { "href": "/users/{user_id}/registrations" },
        "teams": { "href": "/users/{user_id}/teams" },
        "tags": { "href": "/users/{user_id}/tags" }
    }
}
+++++
< 400
< Content-Type: application/json
{ 
    "error": "The email and password cannot be empty"
} 
+++++
< 400
< Content-Type: application/json
{ 
    "error": "The email address is badly formatted"
} 
+++++
< 400
< Content-Type: application/json
{ 
    "error-1": "The field 'email' is required",
    "error-2": "The field 'flibble' is not supported"
} 
+++++
< 409
< Content-Type: application/json
{ 
    "error": "The email is already in use"
} 

Retrieve a single user with a given {user_id}

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the requested resource 

GET /users/{user_id}
> Authorization: Basic {your encoded token}
> Content-Type: application/json
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "email": "stevensegal@kickass.com",
    "title": "Mr",
    "first_name": "Steven",
    "last_name": "Segal",
    "home_telephone": "04444 123 456",
    "mobile_telephone": "05555 123 456",
    "work_telephone": "06666 123 456",
    "linked_in": "http://linked.in/steven_segal",
    "facebook": "http://facebook.com/stevan_segal",
    "twitter": "@steven_segal",
    "google": "+steven_segal",
    "company": "Kick Ass Ltd",
    "job_title": "Ass Kicker",
    "address_line_1": "Address 1",
    "address_line_2": "Address 2",
    "address_line_3": "Address 3",
    "address_line_4": "Address 4",
    "locality": "NY",
    "region": "NY",
    "postcode": "K1KA55",
    "country": "USA",
    "_qr_url": "https://qr.letslynk.com/u/oO68mZwLTvi7bWu5vTgKEQ/Steven%20Segal",
    "_links": {
        "avatar": {
            "_links": {
                "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
            }
        },
        "banner": {
            "_links": {
                "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
            }
        },
        "self": { "href": "/users/{user_id}" },
        "activity": { "href": "/users/{user_id}/activity" },
        "contacts": { "href": "/users/{user_id}/contacts" },
        "invites": { "href": "/users/{user_id}/invites" },
        "goodie": { "href": "/users/{user_id}/goodie" },
        "registrations": { "href": "/users/{user_id}/registrations" },
        "teams": { "href": "/users/{user_id}/teams" },
        "tags": { "href": "/users/{user_id}/tags" }
    }
}
+++++
< 404
< Content-Type: application/json
{
    "error": "The requested resource could not be found"
}

Update an existing user account

This method accepts a partial representation of a user containing one or more of the optional parameters

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the requested resource 

PUT /users/{user_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "email": "stevensegal@kickass.com",
    "password": "kickass",
    "title": "Mr",
    "first_name": "Steven",
    "last_name": "Segal",
    "home_telephone": "04444 123 456",
    "mobile_telephone": "05555 123 456",
    "work_telephone": "06666 123 456",
    "linked_in": "http://linked.in/steven_segal",
    "facebook": "http://facebook.com/stevan_segal",
    "twitter": "@steven_segal",
    "google": "+steven_segal",
    "company": "Kick Ass Ltd",
    "job_title": "Ass Kicker",
    "address_line_1": "Address 1",
    "address_line_2": "Address 2",
    "address_line_3": "Address 3",
    "address_line_4": "Address 4",
    "locality": "NY",
    "region": "NY",
    "postcode": "K1KA55",
    "country": "USA"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "email" : "stevensegal@kickass.com",
    "title" : "Mr",
    "first_name" : "Steven",
    "last_name" : "Segal",
    "home_telephone" : "04444 123 456",
    "mobile_telephone" : "05555 123 456",
    "work_telephone" : "06666 123 456",
    "linked_in" : "http://linked.in/steven_segal",
    "facebook" : "http://facebook.com/stevan_segal",
    "twitter" : "@steven_segal",
    "google" : "+steven_segal",
    "company" : "Kick Ass Ltd",
    "full_job_title" : "Ass Kicker at Kick Ass Ltd",
    "address_line_1" : "Address 1",
    "address_line_2" : "Address 2",
    "address_line_3" : "Address 3",
    "address_line_4" : "Address 4",
    "locality" : "NY",
    "region" : "NY",
    "postcode" : "K1KA55",
    "country" : "USA",
    "_qr_url": "https://qr.letslynk.com/u/oO68mZwLTvi7bWu5vTgKEQ/Steven%20Segal",
    "_links": {
       "avatar": {
            "_links": {
                "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
            }
        },
        "banner": {
            "_links": {
                "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
            }
        },
        "self": { "href": "/users/{user_id}" },
        "activity": { "href": "/users/{user_id}/activity" },
        "contacts": { "href": "/users/{user_id}/contacts" },
        "invites": { "href": "/users/{user_id}/invites" },
        "goodie": { "href": "/users/{user_id}/goodie" },
        "registrations": { "href": "/users/{user_id}/registrations" },
        "teams": { "href": "/users/{user_id}/teams" },
        "tags": { "href": "/users/{user_id}/tags" }
    }
}
+++++
< 400
< Content-Type: application/json
{ 
    "error": "The email and password cannot be empty"
} 
+++++
< 400
< Content-Type: application/json
{ 
    "error": "The email address is badly formatted"
} 
+++++
< 400
< Content-Type: application/json
{ 
    "error-1": "The field 'email' is required",
    "error-2": "The field 'flibble' is not supported"
} 
+++++
< 404
< Content-Type: application/json
{
    "error": "The requested resource could not be found"
}
+++++
< 409
< Content-Type: application/json
{ 
    "error": "The email is already in use"
} 
+++++
< 409
< Content-Type: application/json
{ 
    "error": "Remote object out of date"
} 

Delete a user acount

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the requested resource 

DELETE /users/{user_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204 
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
+++++
< 404
< Content-Type: application/json
{
    "error": "The requested resource could not be found"
}


--
User > Link > Facebook > Dialog

Opens the oauth login dialog.
--

Opens the oauth login dialog.

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

GET /users/{user_id}/link/facebook/dialog?redirect_uri=https://wwww.letslynk.com/link/facebook
> Authorization: Basic {your encoded token}
< 302
< Location: https://www.facebook.com/dialog/oauth?client_id=1111222233334444&state=Z6lWLUs9KqtAYP8d4AaGeXgNM7t6GAqHofFEhkrugL9w4xDyQYo&response_type=code&redirect_uri=https://wwww.letslynk.com/link/facebook


--
User > Link > Facebook > Code

Links a facebook account to a user
--

Send received information to the server for verification and completion of oauth process.

Once the user has been directed back to the client page then the client should submit all uri params to the LetsLynk API to complete the oauth process.

POST /users/{user_id}/link/facebook/code
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "code": "5555666677778888",
    "state": "Z6lWLUs9KqtAYP8d4AaGeXgNM7t6GAqHofFEhkrugL9w4xDyQYo"
}
< 201
< Content-Type: application/json
+++++
< 400
< Content-Type: application/json
{
    "error": "The request was not valid"
}
+++++
< 403
< Content-Type: application/json
{
    "error": "The request was denied"
}
+++++
< 504
< Content-Type: application/json
{
    "error": "The server could not complete your request in time"
}


--
User > Link > Facebook > Mobile Auth

Links a facebook account to a user
--

POST /users/{user_id}/link/facebook/mobile_auth
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "access_token": "IwDbeiWINrotP3JOd1EGoEY7OmOBd2DyV8lh73mutCM.eyJpdiI6IkdKd3BvWlItcWlWRzIwTGYtUkRUVWcifQ.J6qNtSibMmm0yFe2QNHG46jnIUXef3dV-NnbYqXkfrFABjPrgMPQRUeKHJ3GxX1T3nlU7-4P8FUT6dlfwSwHfNJrheTUZIXdd3AlsSRUiUer5xEdFA9IsGEMn6GyHheH9DSr76IeZcBjl-_s4ub3kg",
}
< 201
< Content-Type: application/json
+++++
< 400
< Content-Type: application/json
{
    "error": "The request was not valid"
}
+++++
< 403
< Content-Type: application/json
{
    "error": "The request was denied"
}
+++++
< 504
< Content-Type: application/json
{
    "error": "The server could not complete your request in time"
}


--
User > Link > Facebook > Profile

Fetches the user's facebook profile information
--

GET /users/{user_id}/link/facebook/profile
> Authorization: Basic {your encoded token}
< 201
< Content-Type: application/json
{
    "title": "Mr",
    "first_name": "Steven",
    "last_name": "Segal",
    "facebook": "http://facebook.com/stevan_segal"
    "company": "Kick Ass Ltd",
    "job_title": "Ass Kicker",
    "address_line_1": "Address 1",
    "address_line_2": "Address 2",
    "address_line_3": "Address 3",
    "address_line_4": "Address 4",
    "locality": "NY",
    "region": "NY",
    "postcode": "K1KA55",
    "country": "USA"
    "_links": {
        "avatar": {
            "href": "https://i.letslynk.com/u/9fkoWokA/a/ldpi.jpg" }
        },
        "banner": {
            "href": "https://i.letslynk.com/u/9fkoWokA/b/ldpi.jpg" }
        }
    }
}
+++++
< 400
< Content-Type: application/json
{
    "error": "The request was not valid"
}
+++++
< 403
< Content-Type: application/json
{
    "error": "The request was denied"
}
+++++
< 504
< Content-Type: application/json
{
    "error": "The server could not complete your request in time"
}


--
User > Link > LinkedIn > Dialog

Opens the oauth login dialog.
--

Opens the oauth login dialog.

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

GET /users/{user_id}/link/linkedin/dialog?redirect_uri=https://wwww.letslynk.com/link/linkedin
> Authorization: Basic {your encoded token}
< 302
< Location: https://www.linkedin.com/uas/oauth2/authorization?client_id=1111222233334444&state=Z6lWLUs9KqtAYP8d4AaGeXgNM7t6GAqHofFEhkrugL9w4xDyQYo&response_type=code&redirect_uri=https://wwww.letslynk.com/link/linkedin


--
User > Link > LinkedIn > Code

Links a facebook account to a user
--

Send received information to the server for verification and completion of oauth process.

Once the user has been directed back to the client page then the client should submit all uri params to the server to complete the oauth process.

POST /users/{user_id}/link/linkedin/code
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "code": "5555666677778888",
    "state": "Z6lWLUs9KqtAYP8d4AaGeXgNM7t6GAqHofFEhkrugL9w4xDyQYo"
}
< 201
< Content-Type: application/json
+++++
< 400
< Content-Type: application/json
{
    "error": "The request was not valid"
}
+++++
< 403
< Content-Type: application/json
{
    "error": "The request was denied"
}
+++++
< 504
< Content-Type: application/json
{
    "error": "The server could not complete your request in time"
}


--
User > Link > LinkedIn > Mobile Auth

Links a linkedin account to a user
--

POST /users/{user_id}/link/linkedin/mobile_auth
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "code": "IwDbeiWINrotP3JOd1EGoEY7OmOBd2DyV8lh73mutCM.eyJpdiI6IkdKd3BvWlItcWlWRzIwTGYtUkRUVWcifQ.J6qNtSibMmm0yFe2QNHG46jnIUXef3dV-NnbYqXkfrFABjPrgMPQRUeKHJ3GxX1T3nlU7-4P8FUT6dlfwSwHfNJrheTUZIXdd3AlsSRUiUer5xEdFA9IsGEMn6GyHheH9DSr76IeZcBjl-_s4ub3kg",
}
< 201
< Content-Type: application/json
+++++
< 400
< Content-Type: application/json
{
    "error": "The request was not valid"
}
+++++
< 403
< Content-Type: application/json
{
    "error": "The request was denied"
}
+++++
< 504
< Content-Type: application/json
{
    "error": "The server could not complete your request in time"
}


--
User > Link > LinkedIn > Profile

Fetches the user's LinkedIn profile information
--

GET /users/{user_id}/link/linkedin/profile
> Authorization: Basic {your encoded token}
< 201
< Content-Type: application/json
{
    "title": "Mr",
    "first_name": "Steven",
    "last_name": "Segal",
    "facebook": "http://facebook.com/stevan_segal"
    "company": "Kick Ass Ltd",
    "job_title": "Ass Kicker",
    "address_line_1": "Address 1",
    "address_line_2": "Address 2",
    "address_line_3": "Address 3",
    "address_line_4": "Address 4",
    "locality": "NY",
    "region": "NY",
    "postcode": "K1KA55",
    "country": "USA"
    "_links": {
        "avatar": {
            "href": "https://i.letslynk.com/u/9fkoWokA/a/ldpi.jpg" }
        },
        "banner": {
            "href": "https://i.letslynk.com/u/9fkoWokA/b/ldpi.jpg" }
        }
    }
}
+++++
< 400
< Content-Type: application/json
{
    "error": "The request was not valid"
}
+++++
< 403
< Content-Type: application/json
{
    "error": "The request was denied"
}
+++++
< 504
< Content-Type: application/json
{
    "error": "The server could not complete your request in time"
}


--
User > Link > Google > Dialog

Opens the oauth login dialog.
--

Opens the oauth login dialog.

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

GET /users/{user_id}/link/google/dialog
> Authorization: Basic {your encoded token}
< 200
< Content-Type: application/json
{
    "client_id": "5555666677778888",
    "state": "Z6lWLUs9KqtAYP8d4AaGeXgNM7t6GAqHofFEhkrugL9w4xDyQYo",
    "application_name": "LetsLynk"
}


--
User > Link > Google > Code

Links a google account to a user
--

Send received information to the server for verification and completion of oauth process.

Once the user has been directed back to the client page then the client should submit all uri params to the server to complete the oauth process.

POST /users/{user_id}/link/google/code
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "code": "5555666677778888",
    "state": "Z6lWLUs9KqtAYP8d4AaGeXgNM7t6GAqHofFEhkrugL9w4xDyQYo"
}
< 201
< Content-Type: application/json
+++++
< 400
< Content-Type: application/json
{
    "error": "The request was not valid"
}
+++++
< 403
< Content-Type: application/json
{
    "error": "The request was denied"
}
+++++
< 504
< Content-Type: application/json
{
    "error": "The server could not complete your request in time"
}


--
User > Link > Google > Mobile Auth

Links a google+ account to a user
--

POST /users/{user_id}/link/google/mobile_auth
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "code": "IwDbeiWINrotP3JOd1EGoEY7OmOBd2DyV8lh73mutCM.eyJpdiI6IkdKd3BvWlItcWlWRzIwTGYtUkRUVWcifQ.J6qNtSibMmm0yFe2QNHG46jnIUXef3dV-NnbYqXkfrFABjPrgMPQRUeKHJ3GxX1T3nlU7-4P8FUT6dlfwSwHfNJrheTUZIXdd3AlsSRUiUer5xEdFA9IsGEMn6GyHheH9DSr76IeZcBjl-_s4ub3kg",
}
< 201
< Content-Type: application/json
+++++
< 400
< Content-Type: application/json
{
    "error": "The request was not valid"
}
+++++
< 403
< Content-Type: application/json
{
    "error": "The request was denied"
}
+++++
< 504
< Content-Type: application/json
{
    "error": "The server could not complete your request in time"
}


--
User > Link > Google > Profile

Fetches the user's Google profile information
--

GET /users/{user_id}/link/google/profile
> Authorization: Basic {your encoded token}
< 201
< Content-Type: application/json
{
    "title": "Mr",
    "first_name": "Steven",
    "last_name": "Segal",
    "facebook": "http://facebook.com/stevan_segal"
    "company": "Kick Ass Ltd",
    "job_title": "Ass Kicker",
    "address_line_1": "Address 1",
    "address_line_2": "Address 2",
    "address_line_3": "Address 3",
    "address_line_4": "Address 4",
    "locality": "NY",
    "region": "NY",
    "postcode": "K1KA55",
    "country": "USA"
    "_links": {
        "avatar": {
            "href": "https://i.letslynk.com/u/9fkoWokA/a/ldpi.jpg" }
        },
        "banner": {
            "href": "https://i.letslynk.com/u/9fkoWokA/b/ldpi.jpg" }
        }
    }
}
+++++
< 400
< Content-Type: application/json
{
    "error": "The request was not valid"
}
+++++
< 403
< Content-Type: application/json
{
    "error": "The request was denied"
}
+++++
< 504
< Content-Type: application/json
{
    "error": "The server could not complete your request in time"
}

--
User > Link > Twitter > Dialog

Opens the oauth login dialog.
--

Opens the oauth login dialog.

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

GET /users/{user_id}/link/twitter/dialog?redirect_uri=https://wwww.letslynk.com/link/twitter
> Authorization: Basic {your encoded token}
< 302
< Location: https://api.twitter.com/oauth/authenticate?oauth_token=Z6eEdO8MOmk394WozF5oKyuAv855l4Mlqo7hhlSLik


--
User > Link > Twitter > Code

Links a twitter account to a user
--

Send received information to the server for verification and completion of oauth process.

Once the user has been directed back to the client page then the client should submit all uri params to the server to complete the oauth process.

POST /users/{user_id}/link/twitter/code
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "oauth_token": "5555666677778888",
    "oauth_verifier": "Z6lWLUs9KqtAYP8d4AaGeXgNM7t6GAqHofFEhkrugL9w4xDyQYo"
}
< 201
< Content-Type: application/json
+++++
< 400
< Content-Type: application/json
{
    "error": "The request was not valid"
}
+++++
< 403
< Content-Type: application/json
{
    "error": "The request was denied"
}
+++++
< 504
< Content-Type: application/json
{
    "error": "The server could not complete your request in time"
}


--
User > Link > Twitter > Request Token

Performs Step 1 of the Twitter Reserve Auth process
https://dev.twitter.com/docs/ios/using-reverse-auth
--

POST /users/{user_id}/link/twitter/request_token
> Authorization: Basic {your encoded token}
> Content-Type: application/json
< 200
< Content-Type: application/json
{
    "auth_params": "oauth_nonce=\"xq2maKtilFhVTC1MSxVC4cQIJLd53O6w97YmrdOGSk8\",
                    oauth_signature_method=\"HMAC-SHA1\",
                    oauth_timestamp=\"1322697052\",
                    oauth_consumer_key=\"JP3PyvG67rXRsnayOJOcQ\",
                    oauth_token=\"5mgkU82W0PTA0DLgSIA5vFK6c08i8dXzrbLnX06vl38\",
                    oauth_signature=\"aOM%2FwW2kAowAeHBRvw7faH245p0%3D\",
                    oauth_version=\"1.0\""
}
+++++
< 400
< Content-Type: application/json
{
    "error": "The request was not valid"
}
+++++
< 403
< Content-Type: application/json
{
    "error": "The request was denied"
}
+++++
< 504
< Content-Type: application/json
{
    "error": "The server could not complete your request in time"
}


--
User > Link > Twitter > Mobile Auth

Links a twitter account to a user
--

POST /users/{user_id}/link/twitter/mobile_auth
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "oauth_token": "2311112785-EXKeLV5ezo3HHIaIf1T3ffeww0mR5dfYXKZjjRy0",
    "oauth_token_secret": "KYxxxxx3U4Fxrxva3BGD92--12ehEzFwQ",
    "user_id": 38895958,
    "screen_name": "theseancook"
}
< 201
< Content-Type: application/json
+++++
< 400
< Content-Type: application/json
{
    "error": "The request was not valid"
}
+++++
< 403
< Content-Type: application/json
{
    "error": "The request was denied"
}
+++++
< 504
< Content-Type: application/json
{
    "error": "The server could not complete your request in time"
}


--
User > Link > Twitter > Profile

Fetches the user's Twitter profile information
--

GET /users/{user_id}/link/twitter/profile
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "title": "Mr",
    "first_name": "Steven",
    "last_name": "Segal",
    "facebook": "http://facebook.com/stevan_segal"
    "company": "Kick Ass Ltd",
    "job_title": "Ass Kicker",
    "address_line_1": "Address 1",
    "address_line_2": "Address 2",
    "address_line_3": "Address 3",
    "address_line_4": "Address 4",
    "locality": "NY",
    "region": "NY",
    "postcode": "K1KA55",
    "country": "USA"
    "_links": {
        "avatar": {
            "href": "https://i.letslynk.com/u/9fkoWokA/a/ldpi.jpg" }
        },
        "banner": {
            "href": "https://i.letslynk.com/u/9fkoWokA/b/ldpi.jpg" }
        }
    }
}
< 201
< Content-Type: application/json
+++++
< 400
< Content-Type: application/json
{
    "error": "The request was not valid"
}
+++++
< 403
< Content-Type: application/json
{
    "error": "The request was denied"
}
+++++
< 504
< Content-Type: application/json
{
    "error": "The server could not complete your request in time"
}


--
User > Push Notification Registration

Push notification registration
--

Creates or updates a push notification registration

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

PUT /users/{user_id}/push_notification_registration
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "platform": "ios",
    "token": "3C6EF372FE95"
}
< 200
< Content-Type: application/json


--
User > Push Notification Registration

Push notification registration
--

Creates or updates a push notification registration

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

PUT /users/{user_id}/push_notification_registration
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "platform": "ios",
    "token": "3C6EF372FE95"
}
< 200
< Content-Type: application/json


--
User > Avatar

A user avatar
--

Creates or updates a user avatar

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__Parameters:__ image - The file that you wish to upload

PUT /users/{user_id}/avatar
> Authorization: Basic {your encoded token}
> Content-Type: multipart/form-data
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_links": {
        "self": { "href": "/users/1/avatar" },
        "crop": { "href": "/users/1/avatar/crop" },
        "original": { "href": "https://i.letslynk.com/u/9fkoWokA/a/orig.jpg" },
        "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
        "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
        "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
        "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
        "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
        "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
        "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
    }
}
+++++
< 400
< Content-Type: application/json
{
    "error": "The file type is not supported"
}
+++++
< 400
< Content-Type: application/json
{
    "error": "The file size is too large (max 10Mb)"
}

Gets a user avatar

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

GET /users/{user_id}/avatar
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_links": {
        "self": { "href": "/users/1/avatar" },
        "crop": { "href": "/users/1/avatar/crop" },
        "original": { "href": "https://i.letslynk.com/u/9fkoWokA/a/orig.jpg" },
        "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
        "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
        "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
        "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
        "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
        "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
        "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
    }
}
+++++
< 404
< Content-Type: application/json
{
    "error": "The requested resource could not be found"
}


Delete a user avatar

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

DELETE /users/{user_id}/avatar
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
+++++
< 404


--
User > Avatar > Choose

Allows a user to select one of the "default" avatars as thier avatar
--

Select an avatar

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__Required Parameters:__ 

* avatar_id (Integer) a valid avatar id. These are specified in `GET /avatars`

POST /users/{user_id}/avatar/choose
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "avatar_id": 1
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_links": {
        "self": { "href": "/users/1/avatar" },
        "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
        "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
        "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
        "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
        "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
        "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
        "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
    }
}

--
User > Avatar > Crop

Allows a user to crop thier avatar
--

Crop avatar

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__Required Parameters:__ 

* left (Integer) - _The number of pixels from the left of the image to start the crop_
* upper (Integer) - _The number of pixels from the top of the image to start the crop_
* width (Integer) - _The width of the crop area (All avatars are square so width == height)_
* image_width (String) - _The width of the image used while calculating the above crop dimensionsin pixels_

__Notes:__

* The left and upper set the top left corner of the crop

POST /users/{user_id}/avatar/crop
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "left": 200,
    "upper": 50,
    "width": 300,
    "image_width": 550
}
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_links": {
        "self": { "href": "/users/1/avatar" }, 
        "crop": { "href": "/users/1/avatar/crop" },
        "original": { "href": "https://i.letslynk.com/u/9fkoWokA/a/orig.jpg" },
        "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
        "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
        "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
        "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
        "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
        "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
        "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
    }
}


--
User > Banner

A user banner associated with a user
--

Creates or updates a user banner

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__Parameters:__ image - The file that you wish to upload

PUT /users/{user_id}/banner
> Authorization: Basic {your encoded token}
> Content-Type: multipart/form-data
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_links": {
        "self": { "href": "/users/1/banner" },
        "crop": { "href": "/users/1/banner/crop" },
        "original": { "href": "https://i.letslynk.com/u/9fkoWokA/b/orig.jpg" },
        "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
        "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
        "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
        "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
        "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
        "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
        "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
        "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
        "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
    }
}
+++++
< 400
< Content-Type: application/json
{
    "error": "The file type is not supported"
}
+++++
< 400
< Content-Type: application/json
{
    "error": "The file size is too large (max 10Mb)"
}

Gets a user banner

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

GET /users/{user_id}/banner
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
"_links": {
        "self": { "href": "/users/1/banner" },
        "crop": { "href": "/users/1/banner/crop" },
        "original": { "href": "https://i.letslynk.com/u/9fkoWokA/b/orig.jpg" },
        "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
        "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
        "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
        "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
        "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
        "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
        "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
        "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
        "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
    }
}
+++++
< 404
< Content-Type: application/json
{
    "error": "The requested resource could not be found"
}


Delete a user banner

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

DELETE /users/{user_id}/banner
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
+++++
< 404


--
User > Banner > Crop

Allows a user to crop thier avatar
--

Crop avatar

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__Required Parameters:__ 

* left (Integer) - _The number of pixels from the left of the image to start the crop_
* upper (Integer) - _The number of pixels from the top of the image to start the crop_
* width (Integer) - _The width of the crop area (All banners have a 3:1 width to height ratio so the height will be calculated by the API)_
* image_width (Integer) - _The width of the image used in pixels while calculating the above crop dimensions_

__Notes:__

* The left and upper set the top left corner of the crop

POST /users/{user_id}/banner/crop
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "left": 200,
    "upper": 50,
    "width": 800,
    "image_width": 1600
}
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_links": {
        "self": { "href": "/users/1/banner" },
        "crop": { "href": "/users/1/banner/crop" },
        "original": { "href": "https://i.letslynk.com/u/9fkoWokA/b/orig.jpg" },
        "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
        "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
        "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
        "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
        "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
        "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
        "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
        "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
        "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
    }
    }
}

--
User > Activity

User acitivty provides a collection of user activities
--

Retrieve a collection of user activities

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__URI Filters__: 

* start (Integer) *the item number to start from. If not specified, start will be set to 0*
* limit (Integer) *the maximum number of items to return. If not specified, limit will be set to 10*
* type (String) *allowed values are __all__, __connections__, __goodies__,  __events__ and __collected-goodie__. If the type is not set, it will default to __all__.*

     Example: `/users/1/activity?start=0&limit=10&type=all`
GET /users/{user_id}/activity{?start,limit,type}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "activity": [
        {
            "type": "connection",
            "date": "2013-06-30T12:39:00Z",
            "event": {
                "name": "Event A",
                "_links": {
                    "event": { "href": "/events/{event_id}" }
                }
            },
            "contact": {
                "user": {
                    "first_name": "Jean Claude",
                    "last_name": "Van Damme",
                    "company": "Round House Inc.",
                    "job_title": "CEO",
                    "_links": {
                        "avatar": {
                            "ldpi": { "href": "https://i.letslynk.com/u/9fkoWokA/a/ldpi.jpg" },
                            "mdpi": { "href": "https://i.letslynk.com/u/9fkoWokA/a/mdpi.jpg" },
                            "hdpi": { "href": "https://i.letslynk.com/u/9fkoWokA/a/hdpi.jpg" },
                            "xhdpi": { "href": "https://i.letslynk.com/u/9fkoWokA/a/xhdpi.jpg" },
                            "xxhdpi": { "href": "https://i.letslynk.com/u/9fkoWokA/a/xxhdpi.jpg" }
                        },
                        "banner": {
                            "ldpi": { "href": "https://i.letslynk.com/u/9fkoWokA/b/ldpi.jpg" },
                            "mdpi": { "href": "https://i.letslynk.com/u/9fkoWokA/b/mdpi.jpg" },
                            "hdpi": { "href": "https://i.letslynk.com/u/9fkoWokA/b/hdpi.jpg" },
                            "xhdpi": { "href": "https://i.letslynk.com/u/9fkoWokA/b/xhdpi.jpg" },
                            "xxhdpi": { "href": "https://i.letslynk.com/u/9fkoWokA/b/xxhdpi.jpg" }
                        }
                    }
                },
                "assigned_tags": [
                    {
                        "tag": {
                            "_tag_id": 1001,
                            "name": "Hot Lead",
                            "colour": "F47831",
                            "icon": "flame",
                            "_links": {
                                "self": { "href": "/users/{user_id}/tags/{user_tag_id}" }
                            }
                        },
                        "_links": {
                            "self": { "href": "/users/{user_id}/contacts/{contact_id}/tags/{assigned_tag_id}" }
                        }
                    },
                    {
                        "tag": {
                            "_tag_id": 1003,
                            "name": "Call Back",
                            "colour": "47B569",
                            "icon": "phone",
                            "_links": {
                                "self": { "href": "/users/{user_id}/tags/{user_tag_id}" }
                            }
                        },
                        "_links": {
                            "self": { "href": "/users/{user_id}/contacts/{contact_id}/tags/{assigned_tag_id}" }
                        }
                    }
                ],
                "notes": "true",
                "_links": {
                    "self": { "href": "/users/{user_id}/contacts/{contact_id}" } 
                }
            }
        },
        {
            "type": "goodie",
            "date": "2013-06-30T12:38:00Z",
            "event": {
                "name": "Event A",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "_goodie": {
                "name": "Example Goodie - Document",
                "team": {
                    "name": "Company A",
                    "_links": {
                        "self": { "href": "/teams/{team_id}" } 
                    }
                },
                "type": "document",
                "file-type": "word",
                "document": "/users/{user_id}/goodie/{goodie_collection_id}/document"
            }
        },
        {
            "type": "goodie",
            "date": "2013-06-30T12:37:00Z",
            "event": {
                "name": "Event A",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "goodie": {
                "name": "Example Goodie - Image",
                "team": {
                    "name": "Company B",
                    "_links": {
                        "self": { "href": "/teams/{team_id}" } 
                    }
                },
                "type": "image",
                "image": {
                    "banner": "/users/{user_id}/goodie/{goodie_collection_id}/image?size=banner",
                    "full": "/users/{user_id}/goodie/{goodie_collection_id}/image"
                }
            }
        },
        {
            "type": "goodie",
            "date": "2013-06-30T12:36:00Z",
            "goodie": {
                "name": "Example Goodie - Video Embedded Player", 
                "team": {
                    "name": "Company C",
                    "_links": {
                        "self": { "href": "/teams/{team_id}" } 
                    }
                },
                "type": "video",
                "video": {
                    "type": "embedded-player",
                    "url": "http://www.youtube.com/watch?v=SxHVhxbtrhY"
                }
            }
        },
        {
            "type": "goodie",
            "date": "2013-06-30T12:35:00Z",
            "goodie": {
                "name": "Example Goodie - Video File", 
                "team": {
                    "name": "Company A",
                    "_links": {
                        "self": { "href": "/teams/{team_id}" } 
                    }
                },
                "type": "video",
                "video": {
                    "type": "video-file",
                    "url": "http://www.self-hosted-video.com/video.m4v"
                }
            }
        },
        {
            "type": "goodie",
            "date": "2013-06-30T12:34:00Z",
            "event": {
                "name": "Event B",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "goodie": {
                "name": "Example Goodie - URL", 
                "team": {
                    "name": "Company D",
                    "_links": {
                        "self": { "href": "/teams/{team_id}" } 
                    }
                },
                "type": "website",
                "url": "http://www.letslynk.com"
            }
        },
        {
            "type": "event-attended",
            "date": "2013-06-30T12:33:00Z",
            "event": {
                "name": "Event B",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "attended": {
                "name": "Example Event A", 
                "banner": "/users/{user_id}/events/{event_id}/banner",
                "_links": {
                    "self": { "href": "/users/{user_id}/events/{event_id}" }
                } 
            }
        },
        {
            "type": "event-registered",
            "date": "2013-06-30T12:32:00Z",
            "event": {
                "name": "Event B",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "registered": {
                "name": "Example Event B", 
                "banner": "/users/{user_id}/events/{event_id}/banner",
                "_links": {
                    "self": { "href": "/users/{user_id}/events/{event_id}" }
                } 
            }
        },
        {
            "type": "collected-goodie",
            "date": "2013-06-30T12:31:00Z",
            "event": {
                "name": "Event B",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "goodie": {
                "name": "Example Goodie - URL", 
                "type": "website",
                "url": "http://www.letslynk.com",
                "_links": {
                    "self": { "href": "/teams/{team_id}/goodie/{goodie_id}" } 
                } 
            },
            "user": {
                "first_name": "Billy",
                "last_name": "NoMates",
                "company": "Sad Face Ltd.",
                "job_title": "CEO",
                "avatar": "/users/{user_id}/contacts/{contact_id}/avatar",
                "_links": {
                    "self": { "href": "/users/{user_id}/contacts/{contact_id}" } 
                }
            }
        }
    ],
    "_links": {
        "parent": { "href": "/users/{user_id}" },
        "self": { "href": "/users/{user_id}/activity?start=0&limit=10&type=all" },
        "next": { "href": "/users/{user_id}/activity?start=10&limit=10&type=all" }
    }
}
+++++
< 404
< Content-Type: application/json
{
    "error": "The requested resource could not be found"
}


--
User > Contacts
The following is a section of resources related to contacts, four methods are available:

* Create a new contact
* Retreive a list of contacts  
* Retrieve a single contact
* Delete an existing contact
--

Create a new contact

Creates a contact for the user specified by the {user\_id} in the request uri based on the 
qr\_code supplied in the request body. Also created a recipricol contact for the other user.

If the users have already connected with each other, another connection will be added to each users contact.

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__Required Parameters:__

* qr\_code (String) _the qr code of another user, obtained by scanning a users qr code_
* activity\_time (String) [Format: YYYY-MM-DDTHH:MM:SSZ (RFC 3339)] _the date and time of the connection (specified in UTC)_

POST /users/{user_id}/contacts
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{ 
    "qr_code": "12434-12414-asdsa1-123123",
    "activity_time": "2013-06-30T12:31:00Z"
}
< 201
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "user": {
        "_contact_id": 10,
        "email" : "stevensegal@kickass.com",
        "title" : "Mr",
        "first_name" : "Steven",
        "last_name" : "Segal",
        "home_telephone" : "04444 123 456",
        "mobile_telephone" : "05555 123 456",
        "work_telephone" : "06666 123 456",
        "linked_in" : "http://linked.in/steven_segal",
        "facebook" : "http://facebook.com/stevan_segal",
        "twitter" : "@steven_segal",
        "google" : "+steven_segal",
        "company" : "Kick Ass Ltd",
        "job_title" : "Ass Kicker",
        "address_line_1" : "Address 1",
        "address_line_2" : "Address 2",
        "address_line_3" : "Address 3",
        "address_line_4" : "Address 4",
        "locality" : "NY",
        "region" : "NY",
        "postcode" : "K1KA55",
        "country" : "USA",
        "_qr_code": "12434-12414-asdsa1-123123",
        "_links" : {
            "avatar": {
                "_links": {
                    "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                    "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                    "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                    "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                    "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                    "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                    "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                }
            },
            "banner": {
                "_links": {
                    "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                    "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                    "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                    "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                    "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                    "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                    "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                    "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                    "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                }
            },
        }
    },
    "_links" : {
        "self": { "href": "/users/{user_id}/contacts/{contact_id}" },
        "connections": { "href": "/users/{user_id}/contacts/{contact_id}/connections" },
        "assigned_tags": { "href": "/users/{user_id}/contacts/{contact_id}/tags" },
        "notes": { "href": "/users/{user_id}/contacts/{contact_id}/notes" }
    }
}
+++++
< 400
{
    "error": "The specified QR code is not in the correct format",
}
+++++
< 400
{
    "error-1": "The required field 'qr_code' was missing in the request",
    "error-2": "The field 'flibble' is not allowed in this request"
}
+++++
< 404 
{
    "error": "The specified QR code was not found",
}


Retrieve a list of all a users contacts

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__URI filters:__

* tag\* (Integer) *filter by tag\_id to limit the result set to a set of contacts with a given tag*
* type (String) *filter by type, either __all__, __human__ or __goodie__
* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to return*
* search (String) *text based search on the full name*

Example: `users/1/contacts?tag=1&tag=2&type=all&start=0&limit=10&search=Bruce`

GET /users/{user_id}/contacts{?tag*,type,start,limit}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "contacts": [
        {
            "user": {
                "_contact_id": 10,
                "email": "stevensegal@kickass.com",
                "title": "Mr",
                "first_name": "Steven",
                "last_name": "Segal",
                "home_telephone": "04444 123 456",
                "mobile_telephone": "05555 123 456",
                "work_telephone": "06666 123 456",
                "linked_in": "http://linked.in/steven_segal",
                "facebook": "http://facebook.com/stevan_segal",
                "twitter": "@steven_segal",
                "google": "+steven_segal",
                "company": "Kick Ass Ltd",
                "job_title": "Ass Kicker",
                "address_line_1": "Address 1",
                "address_line_2": "Address 2",
                "address_line_3": "Address 3",
                "address_line_4": "Address 4",
                "locality": "NY",
                "region": "NY",
                "postcode": "K1KA55",
                "country": "USA",
                "_qr_code": "12434-12414-asdsa1-123123",
                "_links" : {
                    "avatar": {
                        "_links": {
                            "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                            "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                            "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                            "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                            "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                            "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                            "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                        }
                    },
                    "banner": {
                        "_links": {
                            "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                            "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                            "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                            "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                            "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                            "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                            "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                            "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                            "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                        }
                    },
                }
            },
            "_links": {
                "self": { "href": "/users/{user_id}/contacts/{contact_id}" },
                "connections": { "href": "/users/{user_id}/contacts/{contact_id}/connections" },
                "assigned_tags": { "href": "/users/{user_id}/contacts/{contact_id}/tags" },
                "notes": { "href": "/users/{user_id}/contacts/{contact_id}/notes" }
            }
        },
        {
            "user": {
                "_contact_id": 11,
                "email" : "brucelee@kickass.com",
                "title" : "Mr",
                "first_name" : "Bruce",
                "last_name" : "Lee",
                "home_telephone" : "04444 123 457",
                "mobile_telephone" : "05555 123 457",
                "work_telephone" : "06666 123 457",
                "linked_in" : "http://linked.in/bruce_lee",
                "facebook" : "http://facebook.com/bruce_lee",
                "twitter" : "@bruce_lee",
                "google" : "+bruce_lee",
                "company" : "Kick Ass Ltd",
                "job_title" : "Ass Kicker",
                "address_line_1" : "Address 1",
                "address_line_2" : "Address 2",
                "address_line_3" : "Address 3",
                "address_line_4" : "Address 4",
                "locality" : "NY",
                "region" : "NY",
                "postcode" : "K1KA55",
                "country" : "USA",
                "_qr_code": "12434-12414-asdsa1-123142",
                "_links" : {
                    "avatar": {
                        "_links": {
                            "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                            "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                            "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                            "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                            "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                            "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                            "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                        }
                    },
                    "banner": {
                        "_links": {
                            "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                            "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                            "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                            "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                            "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                            "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                            "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                            "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                            "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                        }
                    },
                }
            },
            "_links" : {
                "self": { "href": "/users/{user_id}/contacts/{contact_id}" },
                "connections": { "href": "/users/{user_id}/contacts/{contact_id}/connections" },
                "assigned_tags": { "href": "/users/{user_id}/contacts/{contact_id}/tags" },
                "notes": { "href": "/users/{user_id}/contacts/{contact_id}/notes" }
            }
        }
    ],
    "_links": {
        "self": { "href": "/users/{user_id}/contacts?start=0&limit=10" },
        "next": { "href": "/users/{user_id}/contacts?start=10&limit=10" } 
    }
}
+++++
< 404
{
    "error": "The requested resource could not be found"
}


Retreive a single contact

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

GET /users/{user_id}/contacts/{contact_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "user": {
        "_contact_id": 10,
        "email": "stevensegal@kickass.com",
        "title": "Mr",
        "first_name": "Steven",
        "last_name": "Segal",
        "home_telephone": "04444 123 456",
        "mobile_telephone": "05555 123 456",
        "work_telephone": "06666 123 456",
        "linked_in": "http://linked.in/steven_segal",
        "facebook": "http://facebook.com/stevan_segal",
        "twitter": "@steven_segal",
        "google": "+steven_segal",
        "company": "Kick Ass Ltd",
        "job_title": "Ass Kicker",
        "address_line_1": "Address 1",
        "address_line_2": "Address 2",
        "address_line_3": "Address 3",
        "address_line_4": "Address 4",
        "locality": "NY",
        "region": "NY",
        "postcode": "K1KA55",
        "country": "USA",
        "_qr_code": "12434-12414-asdsa1-123123",
        "_links" : {
            "avatar": {
                "_links": {
                    "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                    "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                    "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                    "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                    "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                    "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                    "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                }
            },
            "banner": {
                "_links": {
                    "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                    "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                    "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                    "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                    "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                    "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                    "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                    "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                    "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                }
            }
        }
    },
    "_links" : {
        "self": { "href": "/users/{user_id}/contacts/{contact_id}" },
        "connections": { "href": "/users/{user_id}/contacts/{contact_id}/connections" },
        "assigned_tags": { "href": "/users/{user_id}/contacts/{contact_id}/tags" },
        "notes": { "href": "/users/{user_id}/contacts/{contact_id}/notes" }
    }
}
+++++
< 404
< Content-Type: application/json
{ 
    "error": "The specified resource could not be found"
}


Delete an existing contact

As a contact is a two wa relationship, both parties contact will be deleted. 
Delete contact requests result in the contacts being archived, so if the two users connect again, 
all historical data between them wil be restored.

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

DELETE /users/{user_id}/contacts/{contact_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
+++++
< 404
{
    "error": "The requested resource could not be found"
}


-- 
User > Contact > Connections 

The following is a section of resources related to contact connections:

* Get a list of connections for a given contact
* Get an individual connection
--

Get a list of connections for a contact

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to return*
    
Example: `users/1/contacts/3/connections?start=0&limit=10`

GET /users/{user_id}/contacts/{contact_id}/connections
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "connections": [
        {
            "date": "2013-06-30T12:30:00Z",
            "event": {
                "name": "The Food Show",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "_links": {
                "self": { "href": "/users/{user_id}/contacts/{contact_id}/connections/{connection_id}" }
            }
        },
        {
            "date": "2013-06-30T12:30:00Z",
            "event": {
                "name": "The MMA Show",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "_links": {
                "self": { "href": "/users/{user_id}/contacts/{contact_id}/connections/{connection_id}" }
            }
        }
    ],
    "_links":{
        "self": { "href": "/users/{user_id}/contacts/{contact_id}/connections/{connection_id}?start=0&limit=10" },
        "next": { "href": "/users/{user_id}/contacts/{contact_id}/connections/{connection_id}?start=10&limit=10" }
    }
}


Get a connection

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

Example: `users/1/contacts/3/connections/201`

GET /users/{user_id}/contacts/{contact_id}/connections/{connection_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "date": "2013-06-30T12:30:00Z",
    "event": {
        "name": "The Food Show",
        "_links": {
            "event": { "href": "/users/{user_id}/events/{event_id}" }
        }
    },
    "_links": {
        "self": { "href": "/users/{user_id}/contacts/{contact_id}/connections/{connection_id}" }
    }
}


-- 
User > Contact > Notes 

The following is a section of resources related to contact notes:

* Get a list of notes for a given contact
* Get an individual note
* Add a new note
* Update a note
* Delete a note
--

Get a list of notes for a contact

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to return*

Example: `/users/1/contacts/52/notes?start=0&limit=10`

GET /users/{user_id}/contacts/{contact_id}/notes{?start,limit}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "notes": [
        {
            "_note_id": 1,
            "note": "This is the note text",
            "_links":{
                "self": { "href": "/users/{user_id}/contacts/{contact_id}/notes/{note_id}" } 
            }
        },
        {
            "_note_id": 2,
            "note": "This is another note",
            "_links":{
                "self": { "href": "/users/{user_id}/contacts/{contact_id}/notes/{note_id}" } 
            }
        }
    ],
    "_links": {
        "self": { "href": "/users/{user_id}/contacts/{contact_id}/notes?start=0&limit=10" },
        "next": { "href": "/users/{user_id}/contacts/{contact_id}/notes?start=10&limit=10" }
    }
}


Get a single note

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

Example: `/users/1/contacts/52/notes/1013`
GET /users/{user_id}/contacts/{contact_id}/notes/{note_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_note_id": 1,
    "note": "This is the note text",
    "_links": {
        "self": { "href": "/users/{user_id}/contacts/{contact_id}/notes/{note_id}" }
    }
}


Add a new note

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

__Required perameters:__

* note (string)

POST /users/{user_id}/contacts/{contact_id}/notes
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "note": "This is a new note"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_note_id": 1,
    "note": "This is a new note",
    "_links": {
        "self": { "href": "/users/{user_id}/contacts/{contact_id}/notes/{note_id}" }
    }
}


Update a note

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__Required perameters:__

* note (string)
* modified (integer)

PUT /users/{user_id}/contacts/{contact_id}/notes/{note_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "note": "Replacement note text here"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_note_id": 1,
    "note": "Replacement note text here",
    "_links": {
        "self": { "href": "/users/{user_id}/contacts/{contact_id}/notes/{note_id}" }
    }
}


Delete a note

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

DELETE /users/{user_id}/contacts/{contact_id}/notes/{note_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


-- 
User > Contact > Tags 

The following is a section of resources related to contact tags:

* Get a list of assigned tags for a given contact
* Get an individual tag
* Assign a new tag to a contact
* Unassign a tag from a contact
--

Get a list of assigned tags for a contact

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to return*

GET /users/{user_id}/contacts/{contact_id}/tags{?start,limit}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "assigned_tags": [
        {
            "tag": {
                "_tag_id": 1001,
                "name": "Hot Lead",
                "colour": "F47831",
                "icon": "flame",
                "_links": {
                    "self": { "href": "/users/{user_id}/tags/{user_tag_id}" }
                }
            },
            "_links": {
                "self": { "href": "/users/{user_id}/contacts/{contact_id}/tags/{assigned_tag_id}" }
            }
        },
        {
            "tag": {
                "_tag_id": 1003,
                "name": "Call Back",
                "colour": "47B569",
                "icon": "phone",
                "_links": {
                    "self": { "href": "/users/{user_id}/tags/{user_tag_id}" }
                }
            },
            "_links": {
                "self": { "href": "/users/{user_id}/contacts/{contact_id}/tags/{assigned_tag_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href": "/users/{user_id}/contacts/{contact_id}/tags?start=0&limit=10" },
        "next": { "href": "/users/{user_id}/contacts/{contact_id}/tags?start=10&limit=10" }
    }
}


Get an individual assigned tag

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

GET /users/{user_id}/contacts/{contact_id}/tags/{tag_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "tag": {
        "_tag_id": 1001,
        "name": "Hot Lead",
        "colour": "F47831",
        "icon": "flame",
        "_links": {
            "self": { "href": "/users/{user_id}/tags/{user_tag_id}" }
        }
    },
    "_links": {
        "self": { "href": "/users/{user_id}/contacts/{contact_id}/tags/{assigned_tag_id}" }
    }
}

Assign a user tag to a connection

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__Required perameters:__

* tag\_id (integer) *the user\_tag\_id of the user tag you wish to assign*

POST /users/{user_id}/contacts/{contact_id}/tags
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "tag_id": 1001
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "tag": {
        "_tag_id": 1001,
        "name": "Hot Lead",
        "colour": "F47831",
        "icon": "flame",
        "_links": {
            "self": { "href": "/users/{user_id}/tags/{user_tag_id}" }
        }
    },
    "_links": {
        "self": { "href": "/users/{user_id}/contacts/{contact_id}/tags/{assigned_tag_id}" }
    }
}

Unassign a user assigned tag

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

DELETE /users/{user_id}/contacts/{contact_id}/tags/{assigned_tag_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
+++++
< 404
< Content-Type: application/json
{
    "error": "The requested resource could not be found"
}


--
User > Contact List
This method provides a list of partial contact objects to allow for the building of a filterable contacts list
--

Get a list of contact objects with associated assigned_tags

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to return*
* order (String) *allowed values __asc__ and __desc__, orders the contact by name, first name - last name*
* tag (Integer) *the id of a tag that you wish to filter the list by. More than one tag can be specified in a request*
* search (String) *a search term to filter the result set by. The server will search in the contact full names.*

GET /users/{user_id}/contact_list{?tag*,search,order,start,limit}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
< 200
{
    "contact_list": [
        {
            "user": {
                "email" : "stevensegal@kickass.com",
                "title" : "Mr",
                "first_name" : "Steven",
                "last_name" : "Segal",
                "home_telephone" : "04444 123 456",
                "mobile_telephone" : "05555 123 456",
                "work_telephone" : "06666 123 456",
                "company" : "Kick Ass Ltd",
                "job_title" : "Ass Kicker",
                "_links": {
                    "avatar": {
                        "_links": {
                            "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                            "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                            "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                            "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                            "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                            "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                            "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                        }
                    }
                }
            },
            "assigned_tags": [
                {
                    "tag": {
                        "name": "Hot Lead",
                        "colour": "F47831",
                        "icon": "flame"
                    }
                },
                {
                    "tag": {
                        "name": "Call Back",
                        "colour": "47B569",
                        "icon": "phone"
                    }
                }
            ],
            "_links" : {
                "contact": { "href": "/users/{user_id}/contacts/{contact_id}" }
            }
        },
        {
            "user": {
                "email" : "brucelee@kickass.com",
                "title" : "Mr",
                "first_name" : "Bruce",
                "last_name" : "Lee",
                "home_telephone" : "04444 123 457",
                "mobile_telephone" : "05555 123 457",
                "work_telephone" : "06666 123 457",
                "company" : "Kick Ass Ltd",
                "job_title" : "Ass Kicker",
                "_links": {
                    "avatar": {
                        "_links": {
                            "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                            "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                            "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                            "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                            "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                            "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                            "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                        }
                    }
                }
            },
            "assigned_tags": [
                {
                    "tag": {
                        "name": "Hot Lead",
                        "colour": "F47831",
                        "icon": "flame"
                    }
                },
                {
                    "tag": {
                        "name": "Call Back",
                        "colour": "47B569",
                        "icon": "phone"
                    }
                }
            ],
            "_links" : {
                "contact": { "href": "/users/{user_id}/contacts/{contact_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href": "/users/{user_id}/contact_list?start=0&limit=10" },
        "next": { "href": "/users/{user_id}/contact_list?start=10&limit=10" } 
    }
}


--
User > Events
A collection of events that a user is a staff member of
--
Get a collection of events that a user is a staff member of

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* order (String) *allowed values __dateasc__ and __datedesc__*

Example: `/users/1/events?start=0&limit=10&order=datedesc`
GET /users/{user_id}/events{?start,limit,order}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "events": [
        {
            "name": "The Kick Ass Kung Fu Show",
            "level": "member",
            "_links": {
                "self": { "href": "/events/{event_id}" }
            }
        },
        {
            "name": "The Beer Festival",
            "level": "administrator",
            "_links": {
                "self": { "href": "/events/{event_id}" }
            }
        }   
    ],
    "_links": {
        "self": { "href": "/users/{user_id}/events" }
    }
}
+++++
< 404
< Content-Type: application/json
{
    "error": "The requested resource could not be found"
}

--
User > Invites
Methods for retrieving and responding to invitations,. The following methods are available:

* Retrieve a list of all invitations
* Retrieve an individual invitation
* Update an Invitation as accepted or declined
--

Retreive a collection of invitations for the user

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__URI filters:__

* type (String) *allowed values: __all__, __event__, __event_staff__, __event_visit__, __team__, __team_create__, __team_join__. If no type is specified, the default value is __all__*
* start (Integer) *the item number to start from. If not specified, this will default to 0*
* limit (Integer) *the maximum number of items to return. If not specified, this will default to 10*
* order (String) *allowed values __dateasc__ and __datedesc__*
* status (String) *allowed values: __all__, __pending__, __accepted__, __declined__

Example: `/users/1/invites?type=event&start=0&limit=10&order=datedesc`

GET /users/{user_id}/invites{?type,start,limit,order}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "invites": [    
        {
            "_invite_id": 1,
            "type": "team_join",
            "status": "pending",
            "team": {
                "name": "Kung Fu Masters",
                "": "member"
            },
            "event": {
                "name": "The Kung Fu Show",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "_links": {
                "self": { "href": "/users/{user_id}/invites/{invite_id}" }
            }
        },
        {
            "_invite_id": 2,
            "type": "team_create",
            "status": "pending",
            "event": {
                "name": "The Food Show",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "_links": {
                "self": { "href": "/users/{user_id}/invites/{invite_id}" }
            }
        },
        {
            "_invite_id": 3,
            "type": "event_staff",
            "status": "pending",
            "level": "member",
            "event": {
                "name": "The Kung Fu Show",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "_links": {
                "self": { "href": "/users/{user_id}/invites/{invite_id}" }
            }
        },
        {
            "_invite_id": 4,
            "type": "event_visit",
            "status": "pending",
            "event": {
                "name": "The Kung Fu Show",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "_links": {
                "self": { "href": "/users/{user_id}/invites/{invite_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href" : "/users/{user_id}/invites?start=0&limit=10" },
        "next": { "href" : "/users/{user_id}/invites?start=10&limit=10"}
    }
}

Retreive a single invitation for the user

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 
GET /users/{user_id}/invites/{invite_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_invite_id": 1,
    "type": "team_join",
    "status": "pending",
    "team": {
        "name": "Kung Fu Masters",
        "level": "member"
    },
    "event": {
        "name": "The Kung Fu Show",
        "_links": {
            "event": { "href": "/users/{user_id}/events/{event_id}" }
        }
    },
    "_links": {
        "self": { "href": "/users/{user_id}/invites/{invite_id}" }
    }
}

Update an invitation as accepted or declined

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

__Required parameters:__ 

* status (String) *allowable values __accepted__ or __declined__.*

__Note:__ All invites can be accepted except invitations to attend an Event (__event_visit__). These invites are accetped when the user registers for an event.

PUT /users/{user_id}/invites/{invite_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "status": "accepted",
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_invite_id": 1,
    "type": "team_join",
    "status": "accepted",
    "team": {
        "name": "Kung Fu Masters",
        "level": "member",
        "_links": {
            "team": { "href": "/users/{user_id}/teams/{team_id}" }
        }
    },
    "event": {
        "name": "The Kung Fu Show",
        "_links": {
            "event": { "href": "/users/{user_id}/events/{event_id}" }
        }
    },
    "_links": {
        "self": { "href": "/users/{user_id}/invites/{invite_id}" }
    }
}

-- 
User > Goodie Bag
Methods for retrieving and removing goodies from a users goodie collection. The following methods are available:

* Retrieve a list of all a users goodies
* Retreive a single goodie
* Collect a goodie
* Delete a goodie from a users collection
--

Retrieve a collection of user collected goodies

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* type (Integer) *the goodie type id that you wish to filter by. Options include __document__, __website__, __video__, __image__ and __all__ (default)*
* team (Integer) *the team id that you wish to filter by*
* event (Integer) *the event id that you wish to filter by*
* search (String) *filter the results by searching for a string in the goodie name*

Example: `/users/1/goodie_bag?start=0&limit=10&type=1&team=13`

GET /users/{user_id}/goodie_bag{?start,limit,type*,team*,event*,search}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{    
    "goodies": [    
        {
            "collected_date": "2013-06-30T12:30:00Z",
            "name": "2013 Product Brochure",
            "type": "document",
            "url": "/docs/team/1/asdpoqwefpj.pdf",
            "size": "1MB",
            "team": {
                "name": "Kung Fu Masters",
                "_links": {
                    "self": { "href": "/teams/{team_id}" }
                }
            },
            "_links": {
                "self": { "href": "/users/{user_id}/goodie_bag/{goodie_id}" }
            }
        },
        {
            "collected_date": "2013-06-30T12:30:00Z",
            "name": "2013 Product Video",
            "type": "video",
            "url": "/docs/team/1/video1.mp4",
            "size": "20MB",
            "team": {
                "name": "Kung Fu Masters",
                "_links": {
                    "self": { "href": "/teams/{team_id}" }
                }
            },
            "_links": {
                "self": { "href": "/users/{user_id}/goodie_bag/{goodie_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href": "/users/{user_id}/goodie_bag?start=0&limit=10" },
        "next": { "href": "/users/{user_id}/goodie_bag?start=10&limit=10" }
    }
}

Retrieve a single collected goodie

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource
GET /users/{user_id}/goodie_bag/{goodie_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "collected_date": "2013-06-30T12:30:00Z",
    "name": "2013 Product Brochure",
    "type": "document",
    "url": "/docs/team/1/asdpoqwefpj.pdf",
    "size": "1MB",
    "team": {
        "name": "Kung Fu Masters",
        "_links": {
            "self": { "href": "/teams/{team_id}" }
        }
    },
    "_links": {
        "self": { "href": "/users/{user_id}/goodie_bag/{goodie_id}" }
    }
}


Collect a goodie

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource
POST /users/{user_id}/goodie_bag
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "qr_code": "12434-12414-asdsa1-123123",
    "collected_date": "2013-06-30T12:30:00Z"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "collected_date": "2013-06-30T12:30:00Z",
    "name": "2013 Product Brochure",
    "type": "document",
    "url": "/docs/team/1/asdpoqwefpj.pdf",
    "size": "1MB",
    "team": {
        "name": "Kung Fu Masters",
        "_links": {
            "self": { "href": "/teams/{team_id}" }
        }
    },
    "_links": {
        "self": { "href": "/users/{user_id}/goodie_bag/{goodie_id}" }
    }
}


Delete a goodie from a users collection

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource
DELETE /users/{user_id}/goodie_bag/{goodie_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
User > Notifications

--

Retrieve the notification numbers

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

GET /users/{user_id}/notifications
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "notifications": {
        "invites": 5
    }
}


--
User > Registered Events

Events that user has registered for

__N.B.__ Users register to attend new events by posting thier registration form to `/events/{event_id}/registration_form`. See the section __Event > Registration Form__. 
--

Retrieve a collection of events that a user has registered for

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

__URI filters:__

* start (Integer) *the item number to start from. The default value is 0*
* limit (Integer) *the maximum number of items to return. The default value is 10*
* order (String) *allowed values __dateasc__ and __datedesc__*
GET /users/{user_id}/registered_events{?start,limit,order}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "registered_events": [    
        {
            "registered_date": "2013-06-01T09:53:00Z",
            "event": {
                "name" : "Kick Ass Kung Fu",
                "description" : "Brief description about the event",
                "venue_name" : "ExCeL",
                "address_line_1" : "Address 1",
                "address_line_2" : "Address 2",
                "address_line_3" : "Address 3",
                "address_line_4" : "Address 4",
                "locality" : "London",
                "region" : "London",
                "postcode" : "",
                "country" : "UK",
                "timezone": "Europe/London",
                "_qr_code": "43ef7869-acba-4985-a932-5b5ad9f994ec",
                "_links": {
                    "self": { "href": "/events/{event_id}" },
                    "days": { "href": "/events/{event_id}/days" },
                    "avatar": {
                        "_links": {
                            "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                            "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                            "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                            "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                            "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                            "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                            "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                        }
                    },
                    "banner": {
                        "_links": {
                            "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                            "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                            "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                            "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                            "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                            "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                            "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                            "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                            "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                        }
                    }
                }
            },
            "_links": {
                "self": { "href": " /users/{user_id}/registered_events/{event_id}" }
            }
        },
        {
            "registered_date": "2013-06-04T12:41:00Z",
            "event": {
                "name" : "Ninja Anonymous Event",
                "description" : "Brief description about the event",
                "venue_name" : "ExCeL",
                "address_line_1" : "Address 1",
                "address_line_2" : "Address 2",
                "address_line_3" : "Address 3",
                "address_line_4" : "Address 4",
                "locality" : "London",
                "region" : "London",
                "postcode" : "",
                "country" : "UK",
                "timezone": "Europe/London",
                "_qr_code": "43ef7869-acba-4985-a932-5b5ad9f994ec",
                "_links": {
                    "self": { "href": "/events/{event_id}" },
                    "days": { "href": "/events/{event_id}/days" },
                    "avatar": {
                        "_links": {
                            "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                            "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                            "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                            "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                            "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                            "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                            "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                        }
                    },
                    "banner": {
                        "_links": {
                            "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                            "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                            "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                            "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                            "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                            "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                            "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                            "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                            "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                        }
                    }
                }
            },
            "_links": {
                "self": { "href": " /users/{user_id}/registered_events/{event_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href": "users/{user_id}/registered_events_list?start=0&limit=10" },
        "next": { "href": "users/{user_id}/registered_events_list?start=10&limit=10" }
    }
}


Retrieve a single event that a user has registered for

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

GET /users/{user_id}/registered_events/{event_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json   
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "registered_date": "2013-06-04T12:41:00Z",
    "event": {
        "name" : "Ninja Anonymous Event",
        "description" : "Brief description about the event",
        "venue_name" : "ExCeL",
        "address_line_1" : "Address 1",
        "address_line_2" : "Address 2",
        "address_line_3" : "Address 3",
        "address_line_4" : "Address 4",
        "locality" : "London",
        "region" : "London",
        "postcode" : "",
        "country" : "UK",
        "timezone": "Europe/London",
        "_qr_code": "43ef7869-acba-4985-a932-5b5ad9f994ec",
        "_links": {
            "self": { "href": "/events/{event_id}" },
            "days": { "href": "/events/{event_id}/days" },
            "avatar": {
                "_links": {
                    "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                    "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                    "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                    "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                    "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                    "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                    "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                }
            },
            "banner": {
                "_links": {
                    "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                    "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                    "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                    "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                    "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                    "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                    "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                    "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                    "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                }
            }
        }
    },
    "_links": {
        "self": { "href": "/users/{user_id}/registered_events/{event_id}" }
    }
}


--
User > Teams
A collection of teams that a user belongs to.
--

Retrieve a collection of teams that a user belongs to

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to return*
GET /users/{user_id}/teams{?start,limit}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "teams": [    
        {
            "_team_id": 1,
            "name": "Letslynk Ltd",
            "level": "administrator",
            "event": {
                "name": "The Totally Awesome Show 2013",
                "_links": {
                    "self": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "_links": {
                "self": { "href": "/teams/{team_id}" }
            }
        },
        {
            "_team_id": 2,
            "name": "Bodswap",
            "level": "member",
            "event": {
                "name": "The Food Show 2013",
                "_links": {
                    "self": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "_links": {
                "self": { "href": "/teams/{team_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href": "/user/user_id/teams?start=0&limit=10" },
        "next": { "href": "/user/user_id/teams?start=10&limit=10" }
    }
}


--
User > Tags
Users tags are tags that can be created by an individual user. 
Tags can be assigned to contact connections to allow users to quickly categorise thier contacts

There are five methods available:

* Create a new user tag
* Retreive a list of all user tags for a user
* Retreive an individual user tag
* Update an existing user tag
* Delete an existing user tag
--
Create a new user tag

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the requested resource

__Required parameters:__

* name (string) _the name of the tag_
* colour (string) _the colour of the tag_
* icon (string) _the icon associated with the tag_
POST /users/{user_id}/tags
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "name": "Hot Lead",
    "colour": "F47831",
    "icon": "flame"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_tag_id": 1,
    "name": "Hot Lead",
    "colour": "F47831",
    "icon": "flame",
    "_links": {
        "self": {"href": "/users/{user_id}/tags/{user_tag_id}" }
    }
}


Retrieve a list of user tags for the user\_id specified in the URI

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the requested resource

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to return*

GET /users/{user_id}/tags
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "tags": [
        {
            "_tag_id": 1,
            "name": "Hot Lead",
            "colour": "F47831",
            "icon": "flame",
            "_links": {
                "self": {"href": "/users/{user_id}/tags/{user_tag_id}" }
            }
        },
        {
            "_tag_id": 2,
            "name": "Call Back",
            "colour": "47B569",
            "icon": "phone",
            "_links": {
                "self": {"href": "/users/{user_id}/tags/{user_tag_id}" }
            }
        }
    ],
    "_links": {
        "self": {"href": "/users/{user_id}/tags?start=0&limit=10" },
        "next": {"href": "/users/{user_id}/tags?start=10&limit=10" }
    }
}
+++++
< 404
< Content-Type: application/json
{
    "error": "The requested resource could not be found"
}

Retrieve an individual user tag

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the requested resource

GET /users/{user_id}/tags/{user_tag_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_tag_id": 1,
    "name": "Hot Lead",
    "colour": "F47831",
    "icon": "flame",
    "_links": {
        "self": { "href": "/users/{user_id}/tags/{user_tag_id}" }
    }
}

    
Update an existing user tag

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the requested resource

__Required parameters:__

* modified (Integer) *the modified date should be posted with all updates to tags*

__Optional parameters:__

* tag\_text (String) _the new text for the tag_ 
* icon\_id (Integer) _the id of the new icon for the tag_

PUT /users/{user_id}/tags/{user_tag_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "name": "Kick Boxer",
    "colour": "10B8D5",
    "icon": "foot"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_tag_id": 3,
    "name": "Kick Boxer",
    "colour": "10B8D5",
    "icon": "foot",
    "_links":{
        "self": { "href": "/users/{user_id}/tags/{tag_id}" }
    }
}


Delete an existing user tag

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the requested resource

__Note:__ If the tag has been assigned, all assignements will also be deleted.
DELETE /users/{user_id}/tags/{user_tag_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


-- 
Teams
The Team section provides resources related to teams. Four methods are avaiable:

* Create a new team
* Retrieve a team
* Update a team
* Delete a team
--

Create a new team

__Authentication:__ Required

__Authorization:__ None

__Required Fields:__ 

* invite_id (Integer) *invite_id of th einvite you are accepting - a team cannot bge created without a valid invite*
* name (string) *the name of the team*
* type (String) *either __basic__ or __pro__*

__Optional Fields:__

If the user opts to create a pro team account, they will also need to provide the following credit card information:

* credit_card (see format below): 


    {
        "number": <<encrypted>>,
        "cvv": <<encrypted>>,
        "expiration_month": <<encrypted>>,
        "expiration_year": <<encrypted>>
    }
All credit card fields will be encrypted with Braintree's client side encryption methods. More info at `https://www.braintreepayments.com`

__Note:__ 

* The authenticated user will be added as a member of the team automatically with the level __owner__
* Although no authorization is required, the user must have been invited to create a team for the event.

POST /teams
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "_invite_id": 65,
    "name": "Lets Lynk Ltd",
    "type":  "pro",
    "credit_card": {
        "number": "<<encrypted>>",
        "cvv": "<<encrypted>>",
        "expiration_month": "<<encrypted>>",
        "expiration_year": "<<encrypted>>"
    }
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_team_id": 7,
    "name": "Lets Lynk Ltd",
    "type": "pro",
    "event": {
        "name" : "Ninja Anonymous Event",
        "_links": {
            "self": { "href": "/events/{event_id}" }
        }
    },
    "_links": {
        "self": { "href": "/teams/{team_id}" },
        "invites": { "href": "/teams/{team_id}/invites" },
        "members": { "href": "/teams/{team_id}/members" },
        "tags": { "href": "/teams/{team_id}/team_tags" }
    }
}


Retrieve a team

__Authentication:__ Required

__Authorization:__ The user must be a member of the team they are requesting
GET /teams/{team_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_team_id": 7,
    "name": "Lets Lynk Ltd",
    "type": "pro",
    "event": {
        "name" : "Ninja Anonymous Event",
        "_links": {
            "self": { "href": "/events/{event_id}" }
        }
    },
    "_links": {
        "self": { "href": "/teams/{team_id}" },
        "invites": { "href": "/teams/{team_id}/invites" },
        "members": { "href": "/teams/{team_id}/members" },
        "tags": { "href": "/teams/{team_id}/team_tags" }
    }
}

Update a team
    
__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the team they are requesting

__Required parameters:__

* modified (Integer) *the modified date of the object your are updaing*

__Optional parameters:__ 

If the user opts to update to a pro team account, they will also need to provide the following credit card information:

* team\_name (String) _the name of the team_
* team\_type (String) *the type of team, valid options are __standard__ and __pro__*
* credit_card (see format below): 


    {
        "number": <<encrypted>>,
        "cvv": <<encrypted>>,
        "expiration_month": <<encrypted>>,
        "expiration_year": <<encrypted>>
    }
All credit card fields will be encrypted with Braintree's client side encryption methods. More info at `https://www.braintreepayments.com`

PUT /teams/{team_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "name": "Lets Wink Ltd",
    "type": "pro",
    "credit_card": {
        "number": "<<encrypted>>",
        "cvv": "<<encrypted>>",
        "expiration_month": "<<encrypted>>",
        "expiration_year": "<<encrypted>>"
    }
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_team_id": 7,
    "name": "Lets Wink Ltd",
    "type": "pro",
    "event": {
        "name" : "Ninja Anonymous Event",
        "_links": {
            "self": { "href": "/events/{event_id}" }
        }
    },
    "_links":{
        "self": { "href": "/teams/{team_id}" },
        "invites": { "href": "/teams/{team_id}/invites" },
        "members": { "href": "/teams/{team_id}/members" },
        "tags": { "href": "/teams/{team_id}/team_tags" }
    }
}

Delete a team
    
__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the team they are requesting

__Note:__ Deleting a team, archives all that teams information and goodies, users who have collected team goodies will still have access to it.

DELETE /teams/{team_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Team > Activity

Team activity provides a collection of team activities
--

Retrieve a collection of team activities

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the owner of the user resource 

__URI Filters__: 

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to return*
* type (String) *allowed values are __all__, __connections__, __goodies__,  __events__ and __collected-goodie__*

Example: `/teams/1/activity?start=0&limit=10&type=all`

GET /teams/{team_id}/activity{?start,limit,type}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "activity": [
        {
            "type": "connection",
            "date": "2013-06-30T12:39:00Z",
            "event": {
                "name": "Event A",
                "_links": {
                    "event": { "href": "/events/{event_id}" }
                }
            },
            "contact": {
                "user": {
                    "first_name": "Jean Claude",
                    "last_name": "Van Damme",
                    "company": "Round House Inc.",
                    "job_title": "CEO",
                    "_links": {
                        "avatar": {
                            "_links": {
                                "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                                "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                                "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                                "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                                "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                                "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                                "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                            }
                        },
                        "banner": {
                            "_links": {
                                "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                                "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                                "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                                "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                                "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                                "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                                "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                                "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                                "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                            }
                        }
                    }
                },
                "assigned_tags": [
                    {
                        "tag": {
                            "_tag_id": 1001,
                            "name": "Hot Lead",
                            "colour": "F47831",
                            "icon": "flame",
                            "_links": {
                                "self": { "href": "/users/{user_id}/tags/{user_tag_id}" }
                            }
                        },
                        "_links": {
                            "self": { "href": "/users/{user_id}/contacts/{contact_id}/tags/{assigned_tag_id}" }
                        }
                    },
                    {
                        "tag": {
                            "_tag_id": 1003,
                            "name": "Call Back",
                            "colour": "47B569",
                            "icon": "phone",
                            "_links": {
                                "self": { "href": "/users/{user_id}/tags/{user_tag_id}" }
                            }
                        },
                        "_links": {
                            "self": { "href": "/users/{user_id}/contacts/{contact_id}/tags/{assigned_tag_id}" }
                        }
                    }
                ],
                "notes": "true",
                "_links": {
                    "self": { "href": "/users/{user_id}/contacts/{contact_id}" } 
                }
            }
        },
        {
            "type": "goodie",
            "date": "2013-06-30T12:38:00Z",
            "event": {
                "name": "Event A",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "goodie": {
                "name": "Example Goodie - Document",
                "team": {
                    "name": "Company A",
                    "_links": {
                        "self": { "href": "/teams/{team_id}" } 
                    }
                },
                "type": "document",
                "file-type": "word",
                "document": "/users/{user_id}/goodie/{goodie_collection_id}/document"
            }
        },
        {
            "type": "goodie",
            "date": "2013-06-30T12:37:00Z",
            "event": {
                "name": "Event A",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "goodie": {
                "name": "Example Goodie - Image",
                "team": {
                    "name": "Company B",
                    "_links": {
                        "self": { "href": "/teams/{team_id}" } 
                    }
                },
                "type": "image",
                "image": {
                    "banner": "/users/{user_id}/goodie/{goodie_collection_id}/image?size=banner",
                    "full": "/users/{user_id}/goodie/{goodie_collection_id}/image"
                }
            }
        },
        {
            "type": "goodie",
            "date": "2013-06-30T12:36:00Z",
            "goodie": {
                "name": "Example Goodie - Video Embedded Player", 
                "team": {
                    "name": "Company C",
                    "_links": {
                        "self": { "href": "/teams/{team_id}" } 
                    }
                },
                "type": "video",
                "video": {
                    "type": "embedded-player",
                    "url": "http://www.youtube.com/watch?v=SxHVhxbtrhY"
                }
            }
        },
        {
            "type": "goodie",
            "date": "2013-06-30T12:35:00Z",
            "goodie": {
                "name": "Example Goodie - Video File", 
                "team": {
                    "name": "Company A",
                    "_links": {
                        "self": { "href": "/teams/{team_id}" } 
                    }
                },
                "type": "video",
                "video": {
                    "type": "video-file",
                    "url": "http://www.self-hosted-video.com/video.m4v"
                }
            }
        },
        {
            "type": "goodie",
            "date": "2013-06-30T12:34:00Z",
            "event": {
                "name": "Event B",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "goodie": {
                "name": "Example Goodie - URL", 
                "team": {
                    "name": "Company D",
                    "_links": {
                        "self": { "href": "/teams/{team_id}" } 
                    }
                },
                "type": "website",
                "url": "http://www.letslynk.com"
            }
        },
        {
            "type": "event-attended",
            "date": "2013-06-30T12:33:00Z",
            "event": {
                "name": "Event B",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "attended": {
                "name": "Example Event A", 
                "banner": "/users/{user_id}/events/{event_id}/banner",
                "_links": {
                    "self": { "href": "/users/{user_id}/events/{event_id}" }
                } 
            }
        },
        {
            "type": "event-registered",
            "date": "2013-06-30T12:32:00Z",
            "event": {
                "name": "Event B",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "registered": {
                "name": "Example Event B", 
                "banner": "/users/{user_id}/events/{event_id}/banner",
                "_links": {
                    "self": { "href": "/users/{user_id}/events/{event_id}" }
                } 
            }
        },
        {
            "type": "collected-goodie",
            "date": "2013-06-30T12:31:00Z",
            "event": {
                "name": "Event B",
                "_links": {
                    "event": { "href": "/users/{user_id}/events/{event_id}" }
                }
            },
            "goodie": {
                "name": "Example Goodie - URL", 
                "type": "website",
                "url": "http://www.letslynk.com",
                "_links": {
                    "self": { "href": "/teams/{team_id}/goodie/{goodie_id}" } 
                } 
            },
            "user": {
                "first_name": "Billy",
                "last_name": "NoMates",
                "company": "Sad Face Ltd.",
                "job_title": "CEO",
                "avatar": "/users/{user_id}/contacts/{contact_id}/avatar"
            },
            "_links": {
                "self": { "href": "/teams/{team_id}/contacts/{contact_id}" } 
            }
        }
    ],
    "_links": {
        "parent": { "href": "/teams/{team_id}" },
        "self": { "href": "/teams/{team_id}/activity?start=0&limit=10&type=all" },
        "next": { "href": "/teams/{team_id}/activity?start=10&limit=10&type=all" }
    }
}


-- 
Team > Goodie Bag
Methods for retrieving and removing goodies from a team goodie collection. The following methods are available:

* Retrieve a list of all a team's goodies
* Retreive a single goodie
* Collect a goodie
* Delete a goodie from a team's collection
--

Retrieve a collection of team collected goodies

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team resource

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* type (Integer) *the goodie type id that you wish to filter by*
* team (Integer) *the team id that you wish to filter by*
* event (Integer) *the event id that you wish to filter by*

Example: `/teams/1/goodie_bag?start=0&limit=10&type=1&team=13`

GET /teams/{team_id}/goodie_bag{?start,limit,type*,team*,event*}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{    
    "goodie_bag": [    
        {
            "collected_date": "2013-06-30T12:30:00Z",
            "name": "2013 Product Brochure",
            "type": "Document",
            "url": "/docs/team/1/asdpoqwefpj.pdf",
            "size": "1MB",
            "team": {
                "name": "Kung Fu Masters",
                "_links": {
                    "self": { "href": "/teams/{team_id}" }
                }
            },
            "_links": {
                "self": { "href": "/teams/{team_id}/goodie_bag/{goodie_id}" }
            }
        },
        {
            "collected_date": "2013-06-30T12:30:00Z",
            "name": "2013 Product Video",
            "type": "Video",
            "url": "/docs/team/1/safheqfgqhf.mp4",
            "size": "20MB",
            "team": {
                "name": "Kung Fu Masters",
                "_links": {
                    "self": { "href": "/teams/{team_id}" }
                }
            },
            "_links": {
                "self": { "href": "/teams/{team_id}/goodie_bag/{goodie_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href": "/teams/{team_id}/goodie_bag?start=0&limit=10" },
        "next": { "href": "/teams/{team_id}/goodie_bag?start=0&limit=10" }
    }
}


Retrieve a single collected goodie

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the admin or member of the team resource

GET /teams/{team_id}/goodie_bag/{goodie_collection_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "collected_date": "2013-06-30T12:30:00Z",
    "name": "2013 Product Brochure",
    "type": "Document",
    "url": "/docs/team/1/asdpoqwefpj.pdf",
    "size": "1MB",
    "team": {
        "name": "Kung Fu Masters",
        "_links": {
            "self": { "href": "/teams/{team_id}" }
        }
    },
    "_links": {
        "self": { "href": "/teams/{teamr_id}/goodie_bag/{goodie_id}" }
    }
}


Collect a goodie

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the admin or member of the team resource

POST /teams/{team_id}/goodie_bag
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "qr_code": "12434-12414-asdsa1-123123",
    "collected_date": "2013-06-30T12:30:00Z"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "collected_date": "2013-06-30T12:30:00Z",
    "name": "2013 Product Brochure",
    "type": "Document",
    "url": "/docs/team/1/asdpoqwefpj.pdf",
    "size": "1MB",
    "team":{
        "name": "Kung Fu Masters",
        "_links": {
            "self": { "href": "/teams/{team_id}" }
        }
    },
    "_links": {
        "self": { "href": "/teams/{team_id}/goodie_bag/{goodie_id}" }
    }
}


Delete a goodie from a team collection

__Authentication:__ Required

__Authorization:__ The caller must be authorized as the admin of the team resource

DELETE /teams/{team_id}/goodie_bag/{goodie_collection_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Team > Contacts
The following is a section of resources related to contacts, four methods are available:

* Create a new contact
* Retreive a list of contacts  
* Retrieve a single contact
* Delete an existing contact

--
Create a new contact

Creates a contact for the user specified by the {user\_id} in the request uri based on the 
qr\_code supplied in the request body. Also created a recipricol contact for the other user.

If the users have already connected with each other, another connection will be added to each users contact.

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team 

__Required Parameters:__

* qr\_code (String) _the qr code of another user, obtained by scanning a users qr code_
* activity\_time (String) [Format: YYYY-MM-DDTHH:MM:SS (ISO 8601)] _the date and time of the connection (specified in UTC)_

POST /teams/{team_id}/contacts
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{ 
    "qr_code": "12434-12414-asdsa1-123123",
    "activity_time": "2013-06-30T12:31:00Z"
}
< 201
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "user": {
        "email" : "stevensegal@kickass.com",
        "title" : "Mr",
        "first_name" : "Steven",
        "last_name" : "Segal",
        "home_telephone" : "04444 123 456",
        "mobile_telephone" : "05555 123 456",
        "work_telephone" : "06666 123 456",
        "linked_in" : "http://linked.in/steven_segal",
        "facebook" : "http://facebook.com/stevan_segal",
        "twitter" : "@steven_segal",
        "google" : "+steven_segal",
        "company" : "Kick Ass Ltd",
        "job_title" : "Ass Kicker",
        "address_line_1" : "Address 1",
        "address_line_2" : "Address 2",
        "address_line_3" : "Address 3",
        "address_line_4" : "Address 4",
        "locality" : "NY",
        "region" : "NY",
        "postcode" : "K1KA55",
        "country" : "USA",
        "_qr_code": "12434-12414-asdsa1-123123",
        "_links": {
            "self": { "href": "users/{user_id}" },
            "avatar": {
                "_links": {
                    "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                    "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                    "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                    "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                    "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                    "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                    "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                }
            },
            "banner": {
                "_links": {
                    "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                    "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                    "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                    "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                    "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                    "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                    "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                    "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                    "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                }
            }
        }
    },
    "_links" : {
        "self": { "href": "/teams/{team_id}/contacts/{contact_id}" },
        "connections": { "href": "/teams/{team_id}/contacts/{contact_id}/connections" },
        "assigned_tags": { "href": "/teams/{team_id}/contacts/{contact_id}/tags" },
        "notes": { "href": "/teams/{team_id}/contacts/{contact_id}/notes" },
        "avatar": { "href": "/teams/{team_id}/contacts/{contact_id}/avatar" },
        "banner": { "href": "/teams/{team_id}/contacts/{contact_id}/banner" }
    }
}


Retrieve a list of all a users contacts

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team

__URI filters:__

* tag\* (Integer) *filter by tag\_id to limit the result set to a set of contacts with a given tag*
* type (String) *filter by type, either __all__, __human__ or __goodie__
* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* search (String) *text based search on the full name"

Example: `users/1/contacts?tag=1&tag=2&type=all&start=0&limit=10&search=Bruce`

GET /team/{team_id}/contacts{?tag*,type,start,limit}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "contacts": [
        {
            "user": {
                "email" : "stevensegal@kickass.com",
                "title" : "Mr",
                "first_name" : "Steven",
                "last_name" : "Segal",
                "home_telephone" : "04444 123 456",
                "mobile_telephone" : "05555 123 456",
                "work_telephone" : "06666 123 456",
                "linked_in" : "http://linked.in/steven_segal",
                "facebook" : "http://facebook.com/stevan_segal",
                "twitter" : "@steven_segal",
                "google" : "+steven_segal",
                "company" : "Kick Ass Ltd",
                "job_title" : "Ass Kicker",
                "address_line_1" : "Address 1",
                "address_line_2" : "Address 2",
                "address_line_3" : "Address 3",
                "address_line_4" : "Address 4",
                "locality" : "NY",
                "region" : "NY",
                "postcode" : "K1KA55",
                "country" : "USA",
                "_qr_code": "12434-12414-asdsa1-123123",
                "_links" : {
                    "self": { "href": "users/{user_id}" },
                    "avatar": {
                        "_links": {
                            "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                            "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                            "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                            "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                            "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                            "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                            "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                        }
                    },
                    "banner": {
                        "_links": {
                            "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                            "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                            "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                            "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                            "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                            "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                            "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                            "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                            "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                        }
                    }
                }
            },
            "_links" : {
                "self": { "href": "/team/{team_id}/contacts/{contact_id}" },
                "connections": { "href": "/team/{team_id}/contacts/{contact_id}/connections" },
                "assigned_tags": { "href": "/team/{team_id}/contacts/{contact_id}/tags" },
                "notes": { "href": "/team/{team_id}/contacts/{contact_id}/notes" }
            }
        },
        {
            "user": {
                "email" : "brucelee@kickass.com",
                "title" : "Mr",
                "first_name" : "Bruce",
                "last_name" : "Lee",
                "home_telephone" : "04444 123 457",
                "mobile_telephone" : "05555 123 457",
                "work_telephone" : "06666 123 457",
                "linked_in" : "http://linked.in/bruce_lee",
                "facebook" : "http://facebook.com/bruce_lee",
                "twitter" : "@bruce_lee",
                "google" : "+bruce_lee",
                "company" : "Kick Ass Ltd",
                "job_title" : "Ass Kicker",
                "address_line_1" : "Address 1",
                "address_line_2" : "Address 2",
                "address_line_3" : "Address 3",
                "address_line_4" : "Address 4",
                "locality" : "NY",
                "region" : "NY",
                "postcode" : "K1KA55",
                "country" : "USA",
                "_qr_code": "12434-12414-asdsa1-123142",
                "_links" : {
                    "self": { "href": "users/{user_id}" },
                    "avatar": {
                        "_links": {
                            "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                            "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                            "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                            "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                            "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                            "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                            "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                        }
                    },
                    "banner": {
                        "_links": {
                            "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                            "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                            "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                            "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                            "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                            "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                            "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                            "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                            "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                        }
                    }
                }
            },
            "_links" : {
                "self": { "href": "/team/{team_id}/contacts/{contact_id}" },
                "connections": { "href": "/team/{team_id}/contacts/{contact_id}/connections" },
                "assigned_tags": { "href": "/team/{team_id}/contacts/{contact_id}/tags" },
                "notes": { "href": "/team/{team_id}/contacts/{contact_id}/notes" }
            }
        }
    ],
    "_links": {
        "self": { "href": "/team/{team_id}/contacts?start=0&limit=10" },
        "next": { "href": "/team/{team_id}/contacts?start=10&limit=10" } 
    }
}


Retreive a single contact

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team

GET /teams/{team_id}/contacts/{contact_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "user": {
        "email" : "brucelee@kickass.com",
        "title" : "Mr",
        "first_name" : "Bruce",
        "last_name" : "Lee",
        "home_telephone" : "04444 123 457",
        "mobile_telephone" : "05555 123 457",
        "work_telephone" : "06666 123 457",
        "linked_in" : "http://linked.in/bruce_lee",
        "facebook" : "http://facebook.com/bruce_lee",
        "twitter" : "@bruce_lee",
        "google" : "+bruce_lee",
        "company" : "Kick Ass Ltd",
        "job_title" : "Ass Kicker",
        "address_line_1" : "Address 1",
        "address_line_2" : "Address 2",
        "address_line_3" : "Address 3",
        "address_line_4" : "Address 4",
        "locality" : "NY",
        "region" : "NY",
        "postcode" : "K1KA55",
        "country" : "USA",
        "_qr_code": "12434-12414-asdsa1-123142",
        "_links" : {
            "self": { "href": "users/{user_id}" },
            "avatar": {
                "_links": {
                    "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                    "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                    "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                    "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                    "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                    "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                    "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                }
            },
            "banner": {
                "_links": {
                    "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                    "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                    "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                    "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                    "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                    "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                    "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                    "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                    "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                }
            }
        }
    },
    "_links" : {
        "self": { "href": "/team/{team_id}/contacts/{contact_id}" },
        "connections": { "href": "/team/{team_id}/contacts/{contact_id}/connections" },
        "assigned_tags": { "href": "/team/{team_id}/contacts/{contact_id}/tags" },
        "notes": { "href": "/team/{team_id}/contacts/{contact_id}/notes" }
    }
}


Delete an existing contact

As a contact is a two wa relationship, both parties contact will be deleted. 
Delete contact requests result in the contacts being archived, so if the two users connect again, 
all historical data between them wil be restored.

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team
DELETE /teams/{team_id}/contacts/{contact_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Team > Contact > Connections 

The following is a section of resources related to contact connections:

* Get a list of connections for a given contact
* Get an individual connection


--

Get a list of connections for a contact

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team 

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to return*
    
Example: `teams/1/contacts/3/connections?start=0&limit=10`
    
GET /teams/{team_id}/contacts/{contact_id}/connections
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "connections": [
        {
            "activity_time": "2013-06-30T12:30:00Z",
            "event": {
                "name": "The Food Show",
                "_links": {
                    "self": { "href": "/events/{event_id}" }
                }
            },
            "_links": {
                "self": { "href": "/teams/{team_id}/contacts/{contact_id}/connections/{connection_id}" }
            }
        },
        {
            "activity_time": "2013-06-30T12:30:00Z",
            "event": {
                "name": "The MMA Show",
                "_links": {
                    "self": { "href": "/events/{event_id}" }
                }
            },
            "_links": {
                "self": { "href": "/teams/{team_id}/contacts/{contact_id}/connections/{connection_id}" }
            }
        }
    ],
    "_links":{
        "self": { "href": "/teams/{team_id}/contacts/{contact_id}/connections/{connection_id}?start=0&limit=10" },
        "next": { "href": "/teams/{team_id}/contacts/{contact_id}/connections/{connection_id}?start=10&limit=10" }
    }
}


Get a connection

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team

Example: `teams/1/contacts/3/connections/201`
GET /teams/{team_id}/contacts/{contact_id}/connections/{connection_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "activity_time": "2013-06-30T12:30:00Z",
    "event": {
        "name": "The Food Show",
        "_links": {
            "self": { "href": "/events/{event_id}" }
        }
    },
    "_links": {
        "self": { "href": "/teams/{team_id}/contacts/{contact_id}/connections/{connection_id}" }
    }
}


-- 
Team > Contact > Notes 

The following is a section of resources related to contact notes:

* Get a list of notes for a given contact
* Get an individual note
* Add a new note
* Update a note
* Delete a note
--

Get a list of notes for a contact

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team 

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to return*

Example: `/team/1/contacts/52/notes?start=0&limit=10
`
GET /teams/{team_id}/contacts/{contact_id}/notes{?start,limit}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "notes": [
        {
            "_note_id": 1,
            "note": "This is the note text",
            "_links":{
                "self": { "href": "/teams/{team_id}/contacts/{contact_id}/notes/{note_id}" } 
            }
        },
        {
            "_note_id": 2,
            "note": "This is another note",
            "_links":{
                "self": { "href": "/teams/{team_id}/contacts/{contact_id}/notes/{note_id}" } 
            }
        }
    ],
    "_links":{
        "self": { "href": "/teams/{team_id}/contacts/{contact_id}/notes?start=0&limit=10" },
        "next": { "href": "/teams/{team_id}/contacts/{contact_id}/notes?start=10&limit=10" }
    }
}


Get a single note

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team

Example: `/teams/1/contacts/52/notes/1013`

GET /teams/{team_id}/contacts/{contact_id}/notes/{note_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_note_id": 1,
    "note": "This is the note text",
    "_links": {
        "self": { "href": "/teams/{team_id}/contacts/{contact_id}/notes/{note_id}" }
    }
}


Add a new note

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team

__Required perameters:__

* note (string)

POST /teams/{team_id}/contacts/{contact_id}/notes
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "note": "This is a new note"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_note_id": 1,
    "note": "This is a new note",
    "_links":{
        "self": { "href": "/teams/{team_id}/contacts/{contact_id}/notes/{note_id}" }
    }
}


Update a note

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team 

__Required perameters:__

* note (string)
* modified (integer)

PUT /teams/{team_id}/contacts/{contact_id}/notes/{note_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "note": "Replacement note text here",
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_note_id": 1,
    "note": "Replacement note text here",
    "_links": {
        "self": { "href": "/teams/{team_id}/contacts/{contact_id}/notes/{note_id}" }
    }
}


Delete a note

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team 

DELETE /teams/{team_id}/contacts/{contact_id}/notes/{note_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


-- 
Team > Contact > Tags 

The following is a section of resources related to contact tags:

* Get a list of assigned tags for a given contact
* Get an individual tag
* Assign a new tag to a contact
* Unassign a tag from a contact

--

Get a list of assigned tags for a contact

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team 

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to return*
GET /teams/{team_id}/contacts/{contact_id}/tags{?start,limit}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "assigned tags": [
         {
             "tag": {
                 "_tag_id": 1001,
                "name": "Hot Lead",
                "colour": "F47831",
                "icon": "flame",
                "_links": {
                    "self": { "href": "/teams/{team_id}/tags/{team_tag_id}" }
                }
            },
            "_links": {
                "self": { "href": "/teams/{team_id}/contacts/{contact_id}/tags/{assigned_tag_id}" }
            }
        },
        {
            "tag": {
                "_tag_id": 1003,
                "name": "Call Back",
                "colour": "47B569",
                "icon": "phone",
                "_links": {
                     "self": { "href": "/teams/{team_id}/tags/{team_tag_id}" }
                }
            },
            "_links": {
                 "self": { "href": "/teams/{team_id}/contacts/{contact_id}/tags/{assigned_tag_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href": "/teams/{team_id}/contacts/{contact_id}/tags?start=0&limit=10" },
        "next": { "href": "/teams/{team_id}/contacts/{contact_id}/tags?start=10&limit=10" }
    }
}


Get an individual assigned tag

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team
GET /teams/{team_id}/contacts/{contact_id}/tags/{tag_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_tag": {
        "_tag_id": 1001,
        "name": "Hot Lead",
        "colour": "F47831",
        "icon": "flame",
        "_links": {
            "self": { "href": "/teams/{team_id}/tags/{team_tag_id}" }
        }
    },
    "_links": {
        "self": { "href": "/teams/{team_id}/contacts/{contact_id}/tags/{assigned_tag_id}" }
    }
}

Assign a tag to a contact

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team 

__Required perameters:__

* tag\_id (integer) *the user\_tag\_id of the user tag you wish to assign*
POST /teams/{team_id}/contacts/{contact_id}/tags
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "team_tag_id": 1001
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_tag": {
        "_tag_id": 1001,
        "name": "Hot Lead",
        "colour": "F47831",
        "icon": "flame",
        "_links": {
            "self": { "href": "/teams/{team_id}/tags/{team_tag_id}" }
        }
    },
    "_links": {
        "self": { "href": "/teams/{team_id}/contacts/{contact_id}/tags/{assigned_tag_id}" }
    }
}

Unassign a team assigned tag

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team 
DELETE /teams/{team_id}/contacts/{contact_id}/tags/{tag_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
+++++
< 404
< Content-Type: application/json
{
    "error": "The requested resource could not be found"
}


--
Team > Contact List
This method provides a list of partial contact objects to allow for the building of a filterable contacts list
--

Get a list of partial contact objects for a contact list

__Authentication:__ Required

__Authorization:__ The caller must be authorized as a member or admin of the team 

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to return*
* order (String) *allowed values __alphaasc__ and __alphadesc__*
* tag (Integer) *the id of a tag that you wish to filter the list by. More than one tag can be specified in a request*
* search (String) *a search term to filter the result set by. The server will search in the contact full names.*

GET /teams/{team_id}/contact_list{?tag*,search,order,start,limit}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "contact_list": [
        {
            "user": {
                "email" : "stevensegal@kickass.com",
                "title" : "Mr",
                "first_name" : "Steven",
                "last_name" : "Segal",
                "home_telephone" : "04444 123 456",
                "mobile_telephone" : "05555 123 456",
                "work_telephone" : "06666 123 456",
                "company" : "Kick Ass Ltd",
                "job_title" : "Ass Kicker",
                "_links" : {
                    "avatar": {
                        "_links": {
                            "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                            "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                            "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                            "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                            "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                            "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                            "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                        }
                    }
                }
            },
            "assigned_tags": [
                {
                    "tag": {
                        "name": "Hot Lead",
                        "colour": "F47831",
                        "icon": "flame"
                    }
                },
                {
                    "tag": {
                        "name": "Call Back",
                        "colour": "47B569",
                        "icon": "phone"
                    }
                }
            ],
            "_links" : {
                "self": { "href": "/team/{team_id}/contacts/{contact_id}" }
            }
        },
        {
            "user": {
                "email" : "brucelee@kickass.com",
                "title" : "Mr",
                "first_name" : "Bruce",
                "last_name" : "Lee",
                "home_telephone" : "04444 123 457",
                "mobile_telephone" : "05555 123 457",
                "work_telephone" : "06666 123 457",
                "company" : "Kick Ass Ltd",
                "job_title" : "Ass Kicker",
                "_links" : {
                    "avatar": {
                        "_links": {
                            "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                            "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                            "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                            "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                            "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                            "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                            "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                        }
                    }
                }
            },
            "assigned_tags": [
                {
                    "tag": {
                        "name": "Hot Lead",
                        "colour": "F47831",
                        "icon": "flame"
                    }
                },
                {
                    "tag": {
                        "name": "Call Back",
                        "colour": "47B569",
                        "icon": "phone"
                    }
                }
            ],
            "_links" : {
                "self": { "href": "/team/{team_id}/contacts/{contact_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href": "/teams/{team_id}/contact_list?start=0&limit=10" },
        "next": { "href": "/teams/{team_id}/contact_list?start=10&limit=10" } 
    }
}


--
Team > Event Invites
Methods for dealing with invitations to visit the event your team is exhibiting at.

* Create a new invitation
* Create a batch of invitations from a csv file
* Retreive a list of invitations
* Retrieve a single invitation

--

Create a new invitation to invite a person to attend an event

__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the team they are requesting

__Required parameters:__

* email\_address (String) *The email address of the person you wish to invite

__Optional parameters:__ 

* name (String) *The users name that will be displayed on the invite*
* message (String) *A personal message that will appear on the invite*

POST /teams/{team_id}/event_invites
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "email_address": "chuck.liddel@mma.com",
    "name": "Chuck",
    "message": "Get down to the Kick Ass Kung Fu event, it's gonna kick ass!"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_invite_id": 1423,
    "email_address": "chuck.liddel@mma.com",
    "name": "Chuck",
    "message": "Get down to the Kick Ass Kung Fu event, it's gonna kick ass!",
    "_status": "pending",
    "_links":{
        "self": { "href" : "/teams/{team_id}/event_invites/{event_invite_id}" }
    }
}

Invite batch of people to an event using a csv file

The CSV file should contain  2 columns:
* Column 1 should be labelled "Email" and Contain the email address of the person(s) to be invited
* Column 2 should be labelled "Name" and contain the name used to address the person(s) on thier invitaion.

If the csv file does not meet the required formatting, the api will not attempt to process it.

__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the team they are requesting

POST /teams/{team_id}/event_invites_batch
> Content-Type: text/csv
> Authorization: Basic {your encoded token}
< 201
< Content-Type: application/json
{
    "total_invited": 100
}


Retrieve a collection of invitations

__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the team they are requesting

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*

* status (String) *the status of the invites you wish to filter by. Acceptable values are __pending__, __accepted__ and __declined__*
GET /teams/{team_id}/event_invites{?start,limit,status*}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "invites": [
        {
            "_invite_id": 1423,
            "email_address": "chuck.liddel@mma.com",
            "name": "Chuck",
            "message": "Get down to the Kick Ass Kung Fu event, it's gonna kick ass!",
            "_status": "pending",
            "_links": {
                "self": { "href" : "/events/{event_id}/invites/{event_invite_id}" }
            }
        },
        {
            "_invite_id": 1424,
            "email_address": "andreson.silva@mma.com",
            "name": "Anderson",
            "message": "Get down to the Kick Ass Kung Fu event, it's gonna kick ass!",
            "_status": "pending",
            "_links": {
                "self": { "href" : "/events/{event_id}/invites/{event_invite_id}" }
            }
        }
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/invites" }
    }
}

Retreive a single invitation

__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the team they are requesting

GET /teams/{team_id}/event_invites/{event_invite_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_invite_id": 1423,
    "email_address": "chuck.liddel@mma.com",
    "name": "Chuck",
    "message": "Get down to the Kick Ass Kung Fu event, it's gonna kick ass!",
    "_status": "pending",
    "_links":{
        "self": { "href" : "/events/{event_id}/invites/{event_invite_id}" }
    }
}


--
Team > Invites
Methods to create, retrieve and delete team invites. Four methods are available:

* Create a new team invite
* Retrieve a collection of team invites
* Retrieve a single team invite
* Revoke (Delete) a team invite
--

Create a new team invite
    
__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the team they are requesting

__Required parameters:__

* email_address (String) *the email address of the person you wish to invite*
* level (String) *the user level that the invitee will have when joining the team. Accepted values are __admin__ or __member__*

__Optional paramters:__

* message (String) *an optional message to send to the user with the invite*
* name (String) *the invitee's name*

POST /teams/{team_id}/invites
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "name": "Jet Lee",
    "email_address": "jet.lee@kickass.com",
    "level": "member",
    "message": "Hi Jet, I'm exhibiting at the Kick Ass Kung Fu event, join my team so we can work together!"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "name": "Jet Lee",
    "email_address": "jet.lee@kickass.com",
    "level": "member",
    "message": "Hi Jet, I'm exhibiting at the Kick Ass Kung Fu event, join my team so we can work together!",
    "status": "pending",
    "_links": {
        "self": { "href": "/teams/{team_id}/invites/{team_invite_id}" }
    }
}

Retrieve a collection of team invites
    
__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the team they are requesting

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* status (String) *acceptable values are __pending__, __accepted__ and __declined__*
GET /teams/{team_id}/invites{?start,limit,status*}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "invites": [
        {
            "name": "Jet Lee",
            "email_address": "jet.lee@kickass.com",
            "level": "member",
            "message": "Hi Jet, I'm exhibiting at the Kick Ass Kung Fu event, join my team so we can work together!",
            "status": "pending",
            "_links": {
                "self": { "href": "/teams/{team_id}/invites/{team_invite_id}" }
            }
        },
        {
            "name": "Bruce Willis",
            "email_address": "bruce.willis@kickass.com",
            "level": "member",
            "message": "Hi Bruce, I'm exhibiting at the Kick Ass Kung Fu event, join my team so we can work together!",
            "status": "pending",
            "_links": {
                "self": { "href": "/teams/{team_id}/invites/{team_invite_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href": "/teams/{team_id}/invites" }
    }
}

Retrieve a single team invite
    
__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the team they are requesting
GET /teams/{team_id}/invites/{team_invite_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "name": "Jet Lee",
    "email_address": "jet.lee@kickass.com",
    "level": "member",
    "message": "Hi Jet, I'm exhibiting at the Kick Ass Kung Fu event, join my team so we can work together!",
    "status": "pending",
    "_links": {
        "self": { "href": "/teams/{team_id}/invites/{team_invite_id}" }
    }
}

Revoke (Delete) a team invite

__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the team they are requesting

__Note:__ Only *__pending__* invites can be revoked, if the user has already accepted the invite, you will have to delewte the user from the team.
DELETE /teams/{team_id}/invites/{team_invite_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Team > Goodies 
This section contains methods to create, retrieve, update and delete goodies. Five methods are available:

* Create a new goodie
* Retrieve a teams collection of goodies
* Retrieve a single goodie
* Update a goodie
* Delete a goodie
--

Create a new goodie

__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the team they are requesting

__Required parameters:__

* name (String) *the name of the goodie*
* type (Integer) *the goodie\_type\_*
* url (string) *the location of the goodie item*

__Note:__ The qr_code will be automatically generated by Lets lynk when a goodie creation request is processed.
POST /teams/{team_id}/goodies
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "name": "2013 Product List",
    "type": "document",
    "url": "http://some.url/products.pdf"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "name": "2013 Product List",
    "type": "document",
    "url": "http://some.url/products.pdf",
    "_qr_url": "https://qr.letslynk.com/g/oO68mZwLTvi7bWu5vTgKEQ",
    "_links": {
        "self": { "href": "/teams/{team_id}/goodies/{goodie_id}" }
    }
}

Retrieve a teams collection of goodies

__Authentication:__ Required

__Authorization:__ The user must be a member of the team they are requesting

__URI filters:__

* start (Integer) *the goodie to start from*
* limit (Integer) *the maximum number of goodies to display*
* type (Integer) *the goodie type id's that you wish to filter by*

GET /teams/{team_id}/goodies{?start,limit,type*}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "goodies": [
        {
            "name": "2013 Product List",
            "type": "document",
            "url": "http://some.url/products.pdf",
            "_qr_url": "https://qr.letslynk.com/g/oO68mZwLTvi7bWu5vTgKEQ",
            "_links": {
                "self": { "href": "/teams/{team_id}/goodies/{goodie_id}" }
            }
        },
        {
            "name": "Awesome Video",
            "type": "video",
            "url": "http://some.url/video.m4v",
            "_qr_url": "https://qr.letslynk.com/g/oO68mZwLTvi7bWu5vTgKEQ",
            "_links": {
                "self": { "href": "/teams/{team_id}/goodies/{goodie_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href" : "/teams/{team_id}/goodies" } 
    }
}

Retrieve a single goodie

__Authentication:__ Required

__Authorization:__ The user must be a member of the team they are requesting
GET /teams/{team_id}/goodies/{goodie_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "goodies": [
        {
            "name": "2013 Product List",
            "type": "document",
            "url": "http://some.url/products.pdf",
            "_qr_url": "https://qr.letslynk.com/g/oO68mZwLTvi7bWu5vTgKEQ",
            "_links": {
                "self": { "href": "/teams/{team_id}/goodies/{goodie_id}" }
            }
        },
        {
            "name": "Awesome Video",
            "type": "video",
            "url": "http://some.url/video.m4v",
            "_qr_url": "https://qr.letslynk.com/g/oO68mZwLTvi7bWu5vTgKEQ",
            "_links": {
                "self": { "href": "/teams/{team_id}/goodies/{goodie_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href" : "/teams/{team_id}/goodies" } 
    }
}

Update a goodie

__Authentication:__ Required

__Authorization:__ The user must be an owner or administrator of the team they are requesting

__Optional parameters:__

* name (String) *the name of the goodie*
* type (String) *the goodie\_type\_*
* url (string) *the location of the goodie*
PUT /teams/{team_id}/goodies/{goodie_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "name": "2014 Product List",
    "type": "document",
    "url": "http://some.url/products2014.pdf"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "name": "2014 Product List",
    "type": "document",
    "url": "http://some.url/products2014.pdf",
    "_qr_url": "https://qr.letslynk.com/g/oO68mZwLTvi7bWu5vTgKEQ",
    "_links": {
        "self": { "href": "/teams/{team_id}/goodies/{goodie_id}" }
    }
}

Delete a goodie

__Authentication:__ Required

__Authorization:__ The user must be an owner or administrator of the team they are requesting
DELETE /teams/{team_id}/goodies/{goodie_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


-- 
Team > Members
Methods to retrieve, update and delete team members

__Note:__ Creating team members is done via invites in the section __Team > Invites__

The following methods are available:

* Retrieve a collection of members in a team
* Retrieve an individual team member
* Update a team member
* Delete a team member
--

Retrieve a collection of members in a team

__Authentication:__ Required

__Authorization:__ The user must be a member of the team they are requesting

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* type (Integer) *acceptable values are __member__, __owner__ and __admin__*

GET /teams/{team_id}/members{?start,limit,type*}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "members": [
        {
            "level": "owner",
            "user": {
                "first_name": "Bruce",
                "last_name": "Lee",
                "email": "bruce.lee@kickass.com"
            },
            "_links": {
                "self": { "href": "/teams/{team_id}/members/{user_id}" }
            }
        },
        {
            "level": "member",
            "user": {
                "first_name": "Chuck",
                "last_name": "Norris",
                "email": "chuck.norris@kickass.com"
            },
            "_links": {
                "self": { "href": "/teams/{team_id}/members/{user_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href": "/teams/{team_id}/members" }
    }
}

Retrieve an individual team member

__Authentication:__ Required

__Authorization:__ The user must be a member of the team they are requesting
GET /teams/{team_id}/members/{user_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "level": "owner",
    "user": {
        "first_name": "Bruce",
        "last_name": "Lee",
        "email": "bruce.lee@kickass.com"
    },
    "_links": {
        "self": { "href": "/teams/{team_id}/members/{user_id}" }
    }
}

Update a team member

__Authentication:__ Required

__Authorization:__ The user must be an owner or admin of the team they are requesting

__Optional parameters:__

* level (String) *the users user level affects functions available to them. Allowed values are __admin__ and __member__*. 

__Note:__ The user with level __owner__ cannot be changed.

PUT /teams/{team_id}/members/{user_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "level": "admin"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{ 
    "level": "admin",
    "user": {
        "first_name": "Chuck",
        "last_name": "Norris",
        "email": "chuck.norris@kickass.com"
    },
    "_links": {
        "self": { "href": "/teams/{team_id}/members/{user_id}" }
    }
}


Delete a team member

__Authentication:__ Required

__Authorization:__ The user must be an owner or admin of the team they are requesting

DELETE /teams/{team_id}/members/{member_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Team > Tags
Methods to create, retrieve, update and delete team tags. The following methods are available:

* Create a new team tag
* Retrieve a collection of team tags
* Retrieve an individual team tag
* Update a team tag
* Delete a team tag
--

Create a new team tag

__Authentication:__ Required

__Authorization:__ The user must be an owner or admin of the team they are requesting

__Required parameters:__

* tag_text (String) *the text that will appear on the tag*
* icon\_id (Integer) *the icon\_id of the icon to be displayed on the tag*

POST /teams/{team_id}/tags
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "name": "Interested in Kung Fu lessons",
    "colour": "F47831",
    "icon": "flame"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_tag_id": 100,
    "name": "Interested in Kung Fu lessons",
    "colour": "F47831",
    "icon": "flame",
    "_links":{
        "self": { "href": "/teams/{team_id}/team_tags/{team_tag_id}" }
    }
}

Retrieve a collection of team tags

__Authentication:__ Required

__Authorization:__ The user must be a member of the team they are requesting

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*

GET /teams/{team_id}/tags{?start,limit}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "tags": [
        {
            "_tag_id": 100,
            "name": "Interested in Kung Fu lessons",
            "colour": "F47831",
            "icon": "flame",
            "_links": {
                "self": { "href": "/teams/{team_id}/tags/{team_tag_id}" }
            }
        },
        {
            "_tag_id": 101,
            "name": "Interested in flower arranging",
            "colour": "47B569",
            "icon": "rose",
            "_links": {
                "self": { "href": "/teams/{team_id}/tags/{team_tag_id}" }
            }
        }
    ],
    "_links": {
        "self": { "href": "/teams/{team_id}/tags" }
    }
}


Retrieve a single of team tag

__Authentication:__ Required

__Authorization:__ The user must be a member of the team they are requesting

GET /teams/{team_id}/tags/{team_tag_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_tag_id": 100,
    "name": "Interested in Kung Fu lessons",
    "colour": "F47831",
    "icon": "flame",
    "_links": {
        "self": { "href": "/teams/{team_id}/tags/{team_tag_id}" }
    }
}  


Update a team tag

__Authentication:__ Required

__Authorization:__ The user must be an owner or admiistrator of the team they are requesting

__Optional parameters:__

* tag_text (String) *the text that will appear on the tag*
* icon\_id (Integer) *the icon\_id of the icon to be displayed on the tag*

PUT /teams/{team_id}/tags/{team_tag_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "name": "Morris Dancing",
    "colour": "47B569",
    "icon": "flag"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_tag_id": 100,
    "name": "Morris Dancing",
    "colour": "47B569",
    "icon": "flag",
    "_links":{
        "self": { "href": "/teams/{team_id}/tags/{team_tag_id}" }
    }
}

Delete a team tag

__Authentication:__ Required

__Authorization:__ The user must be an owner or admiistrator of the team they are requesting

DELETE /teams/{team_id}/tags/{team_tag_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Team > Stats > Connection > Combo

Methods available:

* Retrieve team connection stats
--

__Authentication:__ Required

__Authorization:__ The user must be a member of the event they are requesting

__Required parameters:__

__Optional parameters:__

* day (Int)

GET /teams/{team_id}/stats/connection/combo{?day}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "total": 282,
    "used": 10,
    "per_hour": {
        "09:00": 30,
        "10:00": 37,
        "11:00": 68,
        "12:00": 40,
        "13:00": 25,
        "14:00": 26,
        "15:00": 17,
        "16:00": 9,
        "17:00": 4
    },
    "tag_usage": [
        {
            "connections": 20,
            "icon": "/static/img/flame.png",
            "name": "Hot Lead",
            "colour": "F47831"
        },
        {
            "connections": 55,
            "avatar": "/static/img/telephone.png",
            "name": "Telephone",
            "colour": "F7686B"
        },
        {
            "connections": 83,
            "avatar": "/static/img/envelope.png",
            "name": "Email",
            "colour": "10B8D5"
        },
        {
            "connections": 37,
            "avatar": "/static/img/star.png",
            "name": "Previous Customer",
            "colour": "ECBD40"
        }
    ],
    "team_member_connections": [
        {
            "connections": 20,
            "avatar": "/static/img/jean_claude.png",
            "name": "Jean Claude"
        },
        {
            "connections": 33,
            "avatar": "/static/img/bruce_lee.png",
            "name": "Bruce Lee"
        },
        {
            "connections": 2,
            "avatar": "/static/img/tony_jaa.png",
            "name": "Tony Jaa"
        },
        {
            "connections": 15,
            "avatar": "/static/img/donnie_yen.png",
            "name": "Donnie Yen"
        }
    ]
}

--
Team > Stats > Goodies > Combo

Methods available:

* Retrieve team goodie stats
--

__Authentication:__ Required

__Authorization:__ The user must be a member of the event they are requesting

__Required parameters:__

__Optional parameters:__

* day (Int)

GET /teams/{team_id}/stats/goodies/combo{?day}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "total": 873,
    "average": 7.5,
    "per_hour": {
        "09:00": 30,
        "10:00": 37,
        "11:00": 68,
        "12:00": 40,
        "13:00": 25,
        "14:00": 26,
        "15:00": 17,
        "16:00": 9,
        "17:00": 4
    },
    "types": {
        "video": 8,
        "image": 13,
        "document": 9,
        "website": 2
    }
}


--
Events
This section contains methods to create, retrieve, update and delete events. The Following methods are available:

* Create a new event
* Retreive a single event
* Update an event
* Delete an event

### Event Properties ###

* _event_id (Integer) *read only*
* name (String)
* description (String)
* _qr_code (UUID - String) *read only*
* venue_name (String)
* address\_line_1 (String)
* address\_line_2 (String)
* address\_line_3 (String)
* address\_line_4 (String)
* locality (String)
* region (String)
* postcode (String)
* country (String)
* registration_active (Boolean)
* _type (Object)
* _state (Object)
* timezone (String) `timezone must be one of the timezones specified by the API at /timezones`

--

Create a new event

__Authentication:__ Required

__Authorization:__ This method requires no additional authorization.

__Required paramters:__

* event_name (String) *the name of the event*

__Optional parameters:__ description, venue\_name, address\_line_1, address\_line_2, address\_line_3, address\_line_4,
locality, region, postcode, country, timezone

__Note:__ 

* When an event is created is will be set to the "free" type. This can be changed using /event/type
* The timezone must be a valid timezone string as listed in `GET /timezones`. 
By default the timezone will be set to "UTC" if none is specified.
POST /events
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "name" : "Ninja Anonymous Event",
    "description" : "Brief description about the event",
    "venue_name" : "ExCeL",
    "address_line_1" : "Address 1",
    "address_line_2" : "Address 2",
    "address_line_3" : "Address 3",
    "address_line_4" : "Address 4",
    "locality" : "London",
    "region" : "London",
    "postcode" : "",
    "country" : "UK",
    "timezone": "Europe/London"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_event_id": 1,
    "name" : "Ninja Anonymous Event",
    "description" : "Brief description about the event",
    "venue_name" : "ExCeL",
    "address_line_1" : "Address 1",
    "address_line_2" : "Address 2",
    "address_line_3" : "Address 3",
    "address_line_4" : "Address 4",
    "locality" : "London",
    "region" : "London",
    "postcode" : "",
    "country" : "UK",
    "timezone": "Europe/London",
    "_qr_code": "43ef7869-acba-4985-a932-5b5ad9f994ec",
    "_state": {
        "_links": {
            "self": {
                "href": "/events/1/state"
            }
        },
        "name": "created"
    },
    "_type": {
        "price": 0,
        "name": "free"
        "label": "Free",
        "registrations": 100,
        "_links": {
            "self": {
                "href": "/events/1/type"
            }
        }
    },
    "_links": {
        "self": { "href": "/events/{event_id}" },
        "days": { "href": "/events/{event_id}/days" },
        "avatar": {
            "_links": {
                "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
            }
        },
        "banner": {
            "_links": {
                "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
            }
        },
        "registrations": { "href": "/events/1/registrations" },
        "state": { "href": "/events/1/state" },
        "invites": { "href": "/events/1/invites" },
        "staff_invites": { "href": "/events/1/staff_invites" },
        "profile_fields": { "href": "/events/1/profile_fields" },
        "staff": { "href": "/events/1/staff" },
        "questions": { "href": "/events/1/questions" },
        "seminars": { "href": "/events/1/seminars" },
        "doors": { "href": "/events/1/doors" },
        "type": { "href": "/events/1/type" }
    }
}


Retrieve a single event

__Authentication:__ Required

__Authorization:__ This method requires no additional authorization.
GET /events/{event_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_event_id": 1,
    "name" : "Ninja Anonymous Event",
    "description" : "Brief description about the event",
    "venue_name" : "ExCeL",
    "address_line_1" : "Address 1",
    "address_line_2" : "Address 2",
    "address_line_3" : "Address 3",
    "address_line_4" : "Address 4",
    "locality" : "London",
    "region" : "London",
    "postcode" : "",
    "country" : "UK",
    "timezone": "Europe/London",
    "_qr_code": "43ef7869-acba-4985-a932-5b5ad9f994ec",
    "_state": {
        "_links": {
            "self": {
                "href": "/events/1/state"
            }
        },
        "name": "created"
    },
    "_type": {
        "price": 0,
        "name": "free"
        "label": "Free",
        "registrations": 100,
        "_links": {
            "self": {
                "href": "/events/1/type"
            }
        }
    },
    "_links": {
        "self": { "href": "/events/{event_id}" },
        "days": { "href": "/events/{event_id}/days" },
        "avatar": {
            "_links": {
                "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
            }
        },
        "banner": {
            "_links": {
                "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
            }
        },
        "registrations": { "href": "/events/1/registrations" },
        "state": { "href": "/events/1/state" },
        "invites": { "href": "/events/1/invites" },
        "staff_invites": { "href": "/events/1/staff_invites" },
        "profile_fields": { "href": "/events/1/profile_fields" },
        "staff": { "href": "/events/1/staff" },
        "questions": { "href": "/events/1/questions" },
        "doors": { "href": "/events/1/doors" },
        "seminars": { "href": "/events/1/seminars" },
        "type": { "href": "/events/1/type" }
    }
}


Update an existing event

__Authentication:__ Required

__Authorization:__ The caller must be the owner or administrator of the specified event

__Optional parameters:__ *event\_name, venue\_name, address\_line_1, address\_line_2, address\_line_3, address\_line_4,
locality, region, postcode, country, timezone*
PUT /events/{event_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "name" : "Ninja Anonymous Event",
    "description" : "Brief description about the event",
    "venue_name" : "ExCeL",
    "address_line_1" : "100 Connaught Road",
    "address_line_2" : "Address 2",
    "address_line_3" : "Address 3",
    "address_line_4" : "Address 4",
    "locality" : "London",
    "region" : "London",
    "postcode" : "",
    "country" : "UK",
    "timezone": "Europe/London"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_event_id": 1,
    "name" : "Ninja Anonymous Event",
    "description" : "Brief description about the event",
    "venue_name" : "ExCeL",
    "address_line_1" : "100 Connaught Road",
    "address_line_2" : "Address 2",
    "address_line_3" : "Address 3",
    "address_line_4" : "Address 4",
    "locality" : "London",
    "region" : "London",
    "postcode" : "",
    "country" : "UK",
    "timezone": "Europe/London",
    "_qr_code": "43ef7869-acba-4985-a932-5b5ad9f994ec",
    "_state": {
        "_links": {
            "self": {
                "href": "/events/1/state"
            }
        },
        "name": "created"
    },
    "_type": {
        "price": 0,
        "name": "free"
        "label": "Free",
        "registrations": 100,
        "_links": {
            "self": {
                "href": "/events/1/type"
            }
        }
    },
    "_links": {
        "self": { "href": "/events/{event_id}" },
        "days": { "href": "/events/{event_id}/days" },
        "avatar": {
            "_links": {
                "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
            }
        },
        "banner": {
            "_links": {
                "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
            }
        },
        "registrations": { "href": "/events/1/registrations" },
        "state": { "href": "/events/1/state" },
        "invites": { "href": "/events/1/invites" },
        "staff_invites": { "href": "/events/1/staff_invites" },
        "profile_fields": { "href": "/events/1/profile_fields" },
        "staff": { "href": "/events/1/staff" },
        "questions": { "href": "/events/1/questions" },
        "seminars": { "href": "/events/1/seminars" },
        "doors": { "href": "/events/1/doors" },
        "type": { "href": "/events/1/type" }
    }
}

Delete an event

__Authentication:__ Required

__Authorization:__ The caller must be the owner or administrator of the specified event

__Note__: ...
DELETE /events/{event_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Event > Attendances
Methods for event attendances.

* Mark a user as having attended an event
* Get a list of users who have attended an event
* Get an individual attendance
--

Mark a user as having attended an event
__Authentication:__ Required

__Authorization:__ Must be a door scanner

__Required parameters:__ 

* door\_id (Integer)
* event_day\_id (Integer)
* qr_code (string)
* attendance time (Time - String) [Format: HH:MM:SS

POST /events/{event_id}/attendances
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "door_id": 10,
    "event_day_id": 3,
    "qr_code": "12434-12414-asdsa1-123123",
    "attendance_time": "2013-06-30T13:21:55Z"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "date": "2013-06-30T13:21:55Z",
    "user": {
        "first_name": "Forrest",
        "last_name": "Griffin",
        "email": "forest-griffin@cagefighter.com"
    },
    "_links":{
        "self": { "href" : "/events/{event_id}/attendances/{attendance_id}" },
        "door": { "href" : "/events/{event_id}/doors/{door_id}" }
    }
}

Get a list of users who have attended an event

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the event

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* start_time (String) [Format: YYYY-MM-DDTHH:MM:SSZ (RFC 3339)] *the start time to filter by*
* end_time (String) [Format: YYYY-MM-DDTHH:MM:SSZ (RFC 3339)] *the end time to filter by*
* door\_id (Integer) *the doors that you wish to filter by*

GET /events/{event_id}/attendances{start,limit,start_time,end_time,door_id*}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "attendances": [
        {
            "date": "2013-06-30T13:21:55Z",
            "user": {
                "first_name": "Forrest",
                "last_name": "Griffin",
                "email": "forest-griffin@cagefighter.com"
            },
            "_links":{
                "self": { "href" : "/events/{event_id}/attendances/{attendance_id}" },
                "door": { "href" : "/events/{event_id}/doors/{door_id}" }
            }
        },
        {
            "date": "2013-06-30T14:02:16Z",
            "user": {
                "first_name": "John",
                "last_name": "Jones",
                "email": "john-jones@cagefighter.com"
            },
            "_links":{
                "self": { "href" : "/events/{event_id}/attendances/{attendance_id}" },
                "door": { "href" : "/events/{event_id}/doors/{door_id}" }
                
            }
        }
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/attendances" }
    }
}

Get an individual atendance

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the event

GET /events/{event_id}/attendances/{attendance_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "date": "2013-06-30T13:21:55Z",
    "user": {
        "first_name": "Forrest",
        "last_name": "Griffin",
        "email": "forest-griffin@cagefighter.com"
    },
    "door_id": 10,
    "_links":{
        "self": { "href" : "/events/{event_id}/attendances/{attendance_id}" }
    }
}


--
Event > Avatar

An event avatar
--

Creates or updates an event avatar

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event 

__Parameters:__ image - The file that you wish to upload

PUT /events/{event_id}/avatar
> Authorization: Basic {your encoded token}
> Content-Type: multipart/form-data
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_links": {
        "self": { "href": "/events/1/avatar" },
        "crop": { "href": "/events/1/avatar/crop" },
        "original": { "href": "https://i.letslynk.com/u/9fkoWokA/a/orig.jpg" },
        "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
        "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
        "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
        "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
        "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
        "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
        "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
        }
}
+++++
< 400
< Content-Type: application/json
{
    "error": "The file type is not supported"
}
+++++
< 400
< Content-Type: application/json
{
    "error": "The file size is too large (max 10Mb)"
}


Gets an event avatar

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event 

GET /events/{event_id}/avatar
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_links": {
        "self": { "href": "/events/1/avatar" },
        "crop": { "href": "/events/1/avatar/crop" },
        "original": { "href": "https://i.letslynk.com/u/9fkoWokA/a/orig.jpg" },
        "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
        "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
        "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
        "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
        "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
        "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
        "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
    }
}
+++++
< 404
< Content-Type: application/json
{
    "error": "The requested resource could not be found"
}


Delete an event avatar

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event  

DELETE /events/{event_id}/avatar
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
+++++
< 404


--
Event > Avatar > Crop

Allows an event administrator to crop thier avatar
--

Crop avatar

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event 

__Required Parameters:__ 

* left (Integer) - _The number of pixels from the left of the image to start the crop_
* upper (Integer) - _The number of pixels from the top of the image to start the crop_
* width (Integer) - _The width of the crop area (All avatars are square so width == height)_
* size_reference (String) - _The image size used while calculating the above crop dimensions e.g. mdpi, hdpi, xhdpi etc._

__Notes:__

* The left and upper set the top left corner of the crop
* The API will automatically scale the image to 100px X 100px.

POST /events/{event_id}/avatar/crop
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "left": 200,
    "upper": 50,
    "width": 300,
    "size_reference": "xhdpi"
}
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_links": {
        "self": { "href": "/events/1/avatar" }, 
        "crop": { "href": "/events/1/avatar/crop" },
        "original": { "href": "https://i.letslynk.com/u/9fkoWokA/a/orig.jpg" },
        "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
        "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
        "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
        "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
        "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
        "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
        "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
    }
}


--
Event > Banner

An event banner associated with an event
--

Creates or updates an event banner

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event 

__Parameters:__ image - The file that you wish to upload

PUT /events/{event_id}/banner
> Authorization: Basic {your encoded token}
> Content-Type: multipart/form-data
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_links": {
        "self": { "href": "/events/1/banner" },
        "crop": { "href": "/events/1/banner/crop" },
        "original": { "href": "https://i.letslynk.com/u/9fkoWokA/b/orig.jpg" },
        "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
        "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
        "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
        "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
        "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
        "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
        "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
        "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
        "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
    }
}
+++++
< 400
< Content-Type: application/json
{
    "error": "The file type is not supported"
}
+++++
< 400
< Content-Type: application/json
{
    "error": "The file size is too large (max 10Mb)"
}

Gets an event banner

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event 

GET /events/{event_id}/banner
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_links": {
        "self": { "href": "/events/1/banner" },
        "crop": { "href": "/events/1/banner/crop" },
        "original": { "href": "https://i.letslynk.com/u/9fkoWokA/b/orig.jpg" },
        "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
        "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
        "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
        "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
        "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
        "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
        "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
        "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
        "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
    }
}
+++++
< 404
< Content-Type: application/json
{
    "error": "The requested resource could not be found"
}


Delete an event banner

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event 

DELETE /events/{event_id}/banner
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
+++++
< 404


--
Event > Banner > Crop

Allows an event adminr to crop thier event avatar
--

Crop avatar

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event  

__Required Parameters:__ 

* left (Integer) - _The number of pixels from the left of the image to start the crop_
* upper (Integer) - _The number of pixels from the top of the image to start the crop_
* width (Integer) - _The width of the crop area (All banners have a 3:1 width to height ratio so the height will be calculated by the API)_
* size_reference (String) - _The image size used while calculating the above crop dimensions e.g. mdpi, hdpi, xhdpi etc._

__Notes:__

* The left and upper set the top left corner of the crop
* The API will automatically scale the image to 612px X 204px.

POST /events/{event_id}/banner/crop
> Authorization: Basic {your encoded token}
> Content-Type: application/json
{
    "left": 200,
    "upper": 50,
    "width": 800,
    "size_reference": "xhdpi"
}
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_links": {
        "self": { "href": "/users/1/banner" }, 
        "crop": { "href": "/users/1/banner/crop" },
        "original": { "href": "https://i.letslynk.com/u/9fkoWokA/b/orig.jpg" },
        "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
        "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
        "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
        "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
        "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
        "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
        "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
        "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
        "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
    }
}

--
Event > Days
Methods for creating, retrieving and deleting event days. Five methods are available:

* Create an event day
* Retrieve a collection of days for an event
* Retrieve a single event day
* Update an event day
* Delete an event day
--

Create an event day

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event

__Required parameters:__

* opening_time (DateTime - String)[Format: YYYY-MM-DD HH:MM:SS]
* closing_time (DateTime - String)[Format: YYYY-MM-DD HH:MM:SS]

__Note:__ the opening time and closing time should be specified in the event local time. 
The api will convert them to UTC for storage and supply them in both UTC and event local time when retrieved.
Event local time is specified by the timezone that is set on the parent event.

POST /events/{event_id}/days
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "opening_time": "2013-06-15T11:00:00+02:00",
    "closing_time": "2013-06-15T19:00:00+02:00"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_event_day_id": 1,
    "opening_time": "2013-06-15T11:00:00+02:00",
    "closing_time": "2013-06-15T19:00:00+02:00", 
    "_links": {
        "self": { "href" : "/events/{event_id}/days/{event_day_id}" }
    }
}


Retrieve a collection of event days

__Authentication:__ Required

__Authorization:__ None

GET /events/{event_id}/days
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "days": [
        {
            "_event_day_id": 1,
            "opening_time": "2013-06-15T11:00:00+02:00",
            "closing_time": "2013-06-15T19:00:00+02:00",
            "_links": {
                "self": { "href" : "/events/{event_id}/days/{event_day_id}" }
            }
        },
        {
            "_event_day_id": 2,
            "opening_time": "2013-06-16T11:00:00+02:00",
            "closing_time": "2013-06-16T19:00:00+02:00",
            "_links": {
                "self": { "href" : "/events/{event_id}/days/{event_day_id}" }
            }
        }
    ]
}


Retrieve a single of event day

__Authentication:__ Required

__Authorization:__ None

GET /events/{event_id}/days/{event_day_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_event_day_id": 1,
    "opening_time": "2013-06-15T11:00:00+02:00",
    "closing_time": "2013-06-15T19:00:00+02:00",
    "_links":{
        "self": { "href" : "/events/{event_id}/days/{event_day_id}" }
    }
}


Update an event day

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event

__Optional parameters:__ 

* opening_time (DateTime - String)[Format: YYYY-MM-DD HH:MM:SS]
* closing_time (DateTime - String)[Format: YYYY-MM-DD HH:MM:SS]

PUT /events/{event_id}/days/{event_day_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "opening_time": "2013-06-15T11:00:00+02:00",
    "closing_time": "2013-06-15T19:00:00+02:00"
}
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_event_day_id": 1,
    "opening_time": "2013-06-15T11:00:00+02:00",
    "closing_time": "2013-06-15T19:00:00+02:00",
    "_links":{
        "self": { "href" : "/events/{event_id}/days/{event_day_id}" }
    }
}
    

Delete an event day

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event

DELETE /events/{event_id}/days/{event_day_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Event > Doors
Methods to create, retrieve, update and delete event doors. The following methods are available:

* Create a new door
* Retrieve a collection of doors for an event
* Retrieve a single door
* Update a door
* Delete a door
--

Create a door

_Authentication:__ Required

__Authorization:__ Owner or administrator of the event

__Required paramters:__

* door (String)

POST /events/{event_id}/doors
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "door": "North Door"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_event_door_id": 1,
    "door": "North Door",
    "_links": {
        "self": { "href" : "/events/{event_id}/doors/{door_id}" }
    }
}


Retrieve a collection of doors for an event

_Authentication:__ Required

__Authorization:__ Owner, administrator or staff of the event

GET /events/{event_id}/doors
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "doors": [
        {
            "_event_door_id": 1,
            "door": "North Door",
            "_links":{
                "self": { "href" : "/events/{event_id}/doors/{door_id}" }
            }   
        },
        {
            "_event_door_id": 2,
            "door": "South Door",
            "_links":{
                "self": { "href" : "/events/{event_id}/doors/{door_id}" }
            }
        }
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/doors" }
    }
}


Retrieve a single doors for an event

_Authentication:__ Required

__Authorization:__ Owner, administrator or staff of the event

GET /events/{event_id}/doors/{door_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_event_door_id": 1,
    "door": "North Door",
    "_links": {
        "self": { "href" : "/events/{event_id}/doors/{door_id}" }
    }
}


Update a door

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event

__Required paramters:__

* door (String)

PUT /events/{event_id}/doors/{door_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "door": "Main Door"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_event_door_id": 1,
    "door": "Main Door",
    "_links": {
        "self": { "href" : "/events/{event_id}/doors/{door_id}" }
    }
}

Delete a door

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event

DELETE /events/{event_id}/doors/{door_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Event > Invites
Methods for dealing with invitations to visit your event.

* Create a new invitation
* Create a batch of invitations from a csv file
* Retreive a list of invitations
* Retrieve a single invitation
* Revoke (Delete) an invitation
--

Create a new invitation to invite a person to attend an event

__Authentication:__ Required

__Authorization:__ Owner, administrator or staff of the event

__Required parameters:__

* email\_address (String) *The email address of the person you wish to invite

__Optional parameters:__ 

* name (String) *The users name that will be displayed on the invite*
* message (String) *A personal message that will appear on the invite*

POST /events/{event_id}/invites
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "email_address": "chuck.liddel@mma.com",
    "name": "Chuck",
    "message": "Get down to the Kick Ass Kung Fu event, it's gonna kick ass!"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_invite_id": 1423,
    "email": "chuck.liddel@mma.com",
    "name": "Chuck",
    "message": "Get down to the Kick Ass Kung Fu event, it's gonna kick ass!",
    "_status": "pending",
    "_links":{
        "self": { "href" : "/events/{event_id}/invites/{event_invite_id}" }
    }
}

Invite batch of people to an event using a csv file

The CSV file should contain  2 columns:
* Column 1 should be labelled "Email" and Contain the email address of the person(s) to be invited
* Column 2 should be labelled "Name" and contain the name used to address the person(s) on thier invitaion.

If the csv file does not meet the required formatting, the api will not attempt to process it.

__Authentication:__ Required

__Authorization:__ Owner, administrator or staff of the event

POST /events/{event_id}/invites_batch
> Content-Type: text/csv
> Authorization: Basic {your encoded token}
< 201
< Content-Type: application/json
{
    "total_invited": 100
}


Retrieve a collection of invitations

__Authentication:__ Required

__Authorization:__ Owner, administrator or staff of the event

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*

* status (String) *the status of the invites you wish to filter by. Acceptable values are __pending__, __accepted__ and __declined__*
GET /events/{event_id}/invites{?start,limit,status*}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "invites": [
        {
            "_invite_id": 1423,
            "email": "chuck.liddel@mma.com",
            "name": "Chuck",
            "message": "Get down to the Kick Ass Kung Fu event, it's gonna kick ass!",
            "_status": "pending",
            "_links": {
                "self": { "href" : "/events/{event_id}/invites/{event_invite_id}" }
            }
        },
        {
            "_invite_id": 1424,
            "email": "andreson.silva@mma.com",
            "name": "Anderson",
            "message": "Get down to the Kick Ass Kung Fu event, it's gonna kick ass!",
            "_status": "pending",
            "_links": {
                "self": { "href" : "/events/{event_id}/invites/{event_invite_id}" }
            }
        }
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/invites" }
    }
}

Retreive a single invitation

__Authentication:__ Required

__Authorization:__ Owner, administrator or staff of the event

GET /events/{event_id}/invites/{event_invite_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_invite_id": 1423,
    "email": "chuck.liddel@mma.com",
    "name": "Chuck",
    "message": "Get down to the Kick Ass Kung Fu event, it's gonna kick ass!",
    "_status": "pending",
    "_links":{
        "self": { "href" : "/events/{event_id}/invites/{event_invite_id}" }
    }
}


Revoke (Delete) an event invite

__Authentication:__ Required

__Authorization:__ Owner, administrator or staff of the event

__Note:__ An invte can only be revoked while it is still pending

DELETE /events/{event_id}/invites/{event_invite_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Event > Profile Fields
Methods to specify which profile fields are required for event registration. By default only the field __email__ is required.

* Get profile field requirements
* Update profile field requirements
--

Get Profile field requirements

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event

__Note:__ Required can be set to one of the following values:

* __true__ - The field should be displayed during registration and is required to be completed
* __false__ - The field should be displayed during registration but is not required to be completed

__N.B.__ *The email field is a minimum requirement for all Lets Lynk accounts cannot be specified as it is always required*

GET /events/{event_id}/profile_fields
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "title": true,
    "first_name": true,
    "last_name": true,
    "home_telephone": false,
    "work_telephone": false,
    "mobile_telephone": false,
    "linked_in": false,
    "facebook": false,
    "twitter": false,
    "google": false,
    "company": true,
    "job_title": false,
    "address_line_1": false,
    "address_line_2": false,
    "address_line_3": false,
    "address_line_4": false,
    "locality": false,
    "region": false,
    "postcode": false,
    "country": false,
    "_links":{
        "self": { "href" : "/events/{event_id}/profile_fields" }
    }
}

Update profile field requirements

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event

__Note:__ Required can be set to one of the following values:

* __true__ - The field should be displayed during registration and is required to be completed
* __false__ - The field should be displayed during registration but is not required to be completed

PUT /events/{event_id}/profile_fields
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "title": true,
    "first_name": true,
    "last_name": true,
    "home_telephone": false,
    "work_telephone": false,
    "mobile_telephone": false,
    "linked_in": false,
    "facebook": false,
    "twitter": false,
    "google": false,
    "company": true,
    "job_title": false,
    "address_line_1": false,
    "address_line_2": false,
    "address_line_3": false,
    "address_line_4": false,
    "locality": false,
    "region": false,
    "postcode": false,
    "country": false
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "title": true,
    "first_name": true,
    "last_name": true,
    "home_telephone": false,
    "work_telephone": false,
    "mobile_telephone": false,
    "linked_in": false,
    "facebook": false,
    "twitter": false,
    "google": false,
    "company": true,
    "job_title": false,
    "address_line_1": false,
    "address_line_2": false,
    "address_line_3": false,
    "address_line_4": false,
    "locality": false,
    "region": false,
    "postcode": false,
    "country": false,
    "_links":{
        "self": { "href" : "/events/{event_id}/profile_fields" }
    }
}
    

--
Event > Questions
Methods for working with registration questions for an event.

* Create a question
* Get a colection of questions
* Get a single question
* Update a question
* Delete a question
--

Create a question

__Authentication:__ Required

__Authorization:__ Owner or administrator of the event

__Required parameters:__

* question\_type (String) *The type of question (this must be a valid question type, as defined by* `GET /question_types` *)*
* question\_text (String) *The text of of the question e.g. "What is your favourite martial art?"*
* required (Boolean) *Either __true__ or __false__ - specifies if the registrant must answer the question.

POST /events/{event_id}/questions
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "type": "radio",
    "question": "What is your favourite martial art?",
    "required": true
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_question_id": 1,
    "type": "radio",
    "question": "What is your favourite martial art?",
    "required": true,
    "answers": [],
    "_links": {
        "self": { "href" : "/events/{event_id}/questions/{question_id}" },
        "answers": { "href" : "/events/{event_id}/questions/{question_id}/answers" }
    }
}


Get a collection of question

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the specified event

GET /events/{event_id}/questions
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{    
    "questions" : [
        {
            "_question_id": 1,
            "type": "radio",
            "question": "What is your favourite martial art?",
            "required": true,
            "answers": [
                {
                    "_answer_id": 1,
                    "answer": "Kung Fu",
                    "_links": {
                        "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
                    }
                },
                {
                    "_answer_id": 2,
                    "answer": "Karate",
                    "_links": {
                        "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
                    }
                },
                {
                    "_answer_id": 3,
                    "answer": "Kick Boxing",
                    "_links": {
                        "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
                    }
                }
            ],
            "_links":{
                "self": { "href" : "/events/{event_id}/questions/{question_id}" },
                "answers": { "href" : "/events/{event_id}/questions/{question_id}/answers" }
            }
        },
        {
            "_question_id": 1,
            "type": "select",
            "question": "Age group",
            "required": false,
            "answers": [
                {
                    "_answer_id": 1,
                    "answer": "18-25",
                    "_links": {
                        "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
                    }
                },
                {
                    "_answer_id": 2,
                    "answer": "26-34",
                    "_links": {
                        "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
                    }
                },
                {
                    "_answer_id": 3,
                    "answer": "34+",
                    "_links": {
                        "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
                    }
                }
            ],
            "_links":{
                "self": { "href" : "/events/{event_id}/questions/{question_id}" },
                "answers": { "href" : "/events/{event_id}/questions/{question_id}/answers" }
            }
        } 
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/questions" }
    }
}

Get a single question

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the specified event

GET /events/{event_id}/questions/{question_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "type": "radio",
    "question": "What is your favourite martial art?",
    "required": true,
    "answers": [
        {
            "_answer_id": 1,
            "answer": "Kung Fu",
            "_links": {
                "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
            }
        },
        {
            "_answer_id": 2,
            "answer": "Karate",
            "_links": {
                "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
            }
        },
        {
            "_answer_id": 3,
            "answer": "Kick Boxing",
            "_links": {
                "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
            }
        }
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/questions/{question_id}" },
        "answers": { "href" : "/events/{event_id}/questions/{question_id}/answers" }
    }
}


Update a question

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the specified event

__Optional parameters:__

* question\_type (String) *The type of question (this must be a valid question type, as defined by* `GET /question_types` *)*
* question\_text (String) *The text of of the question e.g. "What is your favourite martial art?"*
* required (Boolean) *Either __true__ or __false__ - specifies if the registrant must answer the question.*

PUT /events/{event_id}/questions/{question_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "type": "select",
    "question": "What is your least favourite martial art?",
    "required": true
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "type": "select",
    "question": "What is your least favourite martial art?",
    "required": true,
    "_answers": [
        {
            "_answer_id": 1,
            "answer": "Kung Fu",
            "_links": {
                "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
            }
        },
        {
            "_answer_id": 2,
            "answer": "Karate",
            "_links": {
                "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
            }
        },
        {
            "_answer_id": 3,
            "answer": "Kick Boxing",
            "_links": {
                "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
            }
        }
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/questions/{question_id}" },
        "answers": { "href" : "/events/{event_id}/questions/{question_id}/answers" }
    }
}


Delete a question

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the specified event

DELETE /events/{event_id}/questions/{question_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Event > Question > Answers
Methods for working with question answers

* Create an answer
* Retrieve a list of answers for a question
* Retrieve a single answer
* Update an answer
* Delete a answer
--

Create an answer

__Authentication:__ Required

__Authorization:__ The caller must be an owner or administrator of the specified event

__Required Parameters:__

* answer\_text (String)

POST /events/{event_id}/questions/{question_id}/answers
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "answer": "Taekowndo"
}
< 201
< Content-Type: apllication/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_answer_id": 1,
    "answer": "Taekowndo",
    "_links":{
        "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
    }
}


Retrieve a list of answers for a question

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the specified event

GET /events/{event_id}/questions/{question_id}/answers
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "answers": [
        {
            "_answer_id": 1,
            "answer": "Karate",
            "_links":{
                "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
            }
        },
        {
            "_answer_id": 2,
            "answer": "Kung Fu",
            "_links":{
                "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
            }
        },
        {
            "_answer_id": 3,
            "answer": "Taekowndo",
            "_links":{
                "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
            }
        }
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/questions/{question_id}/answers" }
    }
}

Retrieve a single question answer

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the specified event

GET /events/{event_id}/questions/{question_id}/answers/{answer_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_answer_id": 1,
    "answer": "Karate",
    "_links": {
        "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
    }
}


Update an answer

__Authentication:__ Required

__Authorization:__ The caller must be an owner or administrator of the specified event

__Required parameters:__

* answer_text (String)

PUT /events/{event_id}/questions/{question_id}/answers/{answer_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "text": "Kick-boxing"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_answer_id": 1,
    "answer": "Kick-boxing",
    "_links":{
        "self": { "href" : "/events/{event_id}/questions/{question_id}/answers/{answer_id}" }
    }
}


Delete a question answer

__Authentication:__ Required

__Authorization:__ The caller must be an owner or administrator of the specified event

DELETE /events/{event_id}/questions/{question_id}/answers/{answer_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


-- 
Event > Questions > Order
Methods to get and set the order of the registration questions
--

Get the question order

__Authentication:__ Required

__Authorization:__ The caller must be an team member of the specified event

GET /events/{event_id}/questions/order
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "question_order": [1, 3, 4, 2]
}


Update the question order

__Authentication:__ Required

__Authorization:__ The caller must be an team member of the specified event

__Required parameters:__

* question_order (List/array of Integers) *A list of question id's  in the desired order*

PUT /events/{event_id}/questions/order
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
   "question_order": [4, 3, 2, 1]
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "question_order": [4, 3, 2, 1]
}


--
Event > Registration Form
Methods to get the meta data for building a registration form.
--

Get registration form meta data

__Authentication:__ Required

__Authorization:__ None

__URL parameters:__

* __section__ - determines if the api returns profile fields, questions and answers or both. Acceptable values: "profile", "questions", "all". If this parameter is not supplied, all form information will be supplied.

GET /events/{event_id}/registration_form{?section}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "profile_fields":[
        {
            "field": "first_name",
            "required": true,
            "value": "Bruce"
        },
        {
            "field": "last_name",
            "required": true,
            "value": "Lee"
        }
    ],
    "questions": [
        {
            "_question_id": 1,
            "question": "What is the best martial art?",
            "type": "select",
            "required": true,
            "answers": [
                {
                    "_answer_id": 1,
                    "answer": "Karate"
                },
                {
                    "_answer_id": 2,
                    "answer": "KickBoxing"
                }
            ]
        },
        {
            "_question_id": 2,
            "question": "What is the best colour?",
            "type": "radio",
            "required": false,
            "answers": [
                {
                    "_answer_id": 3,
                    "answer": "Blue"
                },
                {
                    "_answer_id": 4,
                    "answer": "Red"
                }
            ]
        },
        {
            "_question_id": 3,
            "question": "What cheeses do you like?",
            "type": "checkbox",
            "required": false,
            "answers": [
                {
                    "_answer_id": 1,
                    "answer": "Cheddar"
                },
                {
                    "_answer_id": 2,
                    "answer": "Brie"
                },
                {
                    "_answer_id": 3,
                    "answer": "Camembert"
                }
            ]
        },
        {
            "_question_id": 4,
            "question": "What's the name of you favourite martial artist?",
            "type": "text",
            "required": false
        },
        {
            "_question_id": 5,
            "question": "Tell us a martial arts story",
            "type": "text_area",
            "required": false
        }
    ]
}


Post a completed registration form

__Authentication:__ Required

__Authorization:__ None

*Returns an instance of a user registration.
Registration form can be supplied with an option invite_id 
in which instance the corresponding event invite is automatically 
accepted if the registration form is submitted sucessfully.*

POST /events/{event_id}/registration_form
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "profile_fields":[
        "first_name": "Brucie",
        "last_name": "Lei"
    ],
    "questions": [
        "100": 1,
        "101": 4,
        "102": [ 5, 7 ],
        "103": "Bruce Lee",
        "104": "I once karate chopped a giraffe in half"
    ],
    "invite_id": 7
}
< 201
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_links": {
        "self": { "href": "/users/{user_id}/registered_events/{event_id}" },
        "event": { "href": "/events/{event_id}" }
    }
}


-- 
Event > Registration Status

* Get the registration status of an event
* active and deactive registration for an event
--

Get the registration status for an event

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the specified event

GET /events/{event_id}/registration_status
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "status": "inactive",
    "_links": {
        "self": { "href": "/events/1/registration_status" }
    }
}


Update the registration status of an event

__Authentication:__ Required

__Authorization:__ The caller must be an admnistrator of the specified event

__Required parameters:__ __status__(string) must be either "active" or "inactive"

PUT /events/{event_id}/registration_status
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "status": "active"   
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "status": "active",
    "_links": {
        "self": { "href": "/events/1/registration_status" }
    }
}

--
Event > Registrations

* Get a list of event registrations
* Gen an individual registration
--

Get a list of registrations

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the specified event

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* start_time (String) [Format: YYYY-MM-DDTHH:MM:SSZ (RFC 3339)] *the start time to filter by*
* end_time (String) [Format: YYYY-MM-DDTHH:MM:SSZ (RFC 3339)] *the end time to filter by*

GET /events/{event_id}/registrations{?start,limit,start_time,end_time}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "registrations": [
        {
            "registration_date": "2013-06-30T13:01:12Z",
            "user": {
                "first_name": "Bas",
                "last_name": "Rutten",
                "email_address": "bas.rutten@mma.com"
            },
            "registration_form": {
                "questions": [
                    "100": 1,
                    "101": 4,
                    "102": [ 5, 7 ],
                    "103": "Bruce Lee",
                    "104": "I once karate chopped a giraffe in half"
                ]
            },
            "_links":{
                "self": { "href" : "/events/{event_id}/registrations/{registration_id}" }
            }
        }, 
        {
            "registration_date": "2013-06-30T13:12:17Z",
            "user": {
                "first_name": "Tito",
                "last_name": "Ortiz",
                "email_address": "tito.ortiz@mma.com"
            },
            "registration_form": {
                "questions": [
                    "1": 12,
                    "2": 24
                ]
            },
            "_links":{
                "self": { "href" : "/events/{event_id}/registrations/{registration_id}" }
            }
        }  
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/registrations" }
    }
}


Get a single registration

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the specified event

GET /events/{event_id}/registrations/{registration_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "registration_date": "2013-06-30T13:01:12Z",
    "user": {
        "first_name": "Bas",
        "last_name": "Rutten",
        "email_address": "bas.rutten@mma.com"
    },
    "registration_form": {
        "questions": [
            "1": 12,
            "2": 24
        ]
    },
    "_links":{
        "self": { "href" : "/events/{event_id}/registrations/{registration_id}" }
    }
}


--
Event > Registrations Table

* Get a table of all the users registered for an event.
--

Get a table of registered users for the event

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the specified event

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* attended (String) *filters results by whether the user has attended the event, only valid value = "true" (default is no filter)*
* search (String) *text search that filters result by name and/or company name - any valid string can be supplied*

GET /events/{event_id}/registrations_table{?start,limit,attended,search}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "registrations_table": [
        {
            "name": "Bas Rutten",
            "company": "MMA.com",
            "email_address": "bas.rutten@mma.com",
            "attended": true,
            "invited_by": "Team: Team A",
            "_links": {
                "registration": { "href" : "/events/{event_id}/registrations/{registration_id}" },
                "inviter": { "href" : "/events/{event_id}/team/{team_id}" }
            }
        }, 
        {
            "name": "Tito Ortiz",
            "company": "MMA.com",
            "email_address": "tito.ortiz@mma.com",
            "attended": false,
            "invited_by": "Event",
            "_links": {
                "registration": { "href" : "/events/{event_id}/registrations/{registration_id}" },
                "inviter": { "href" : "/events/{event_id}" }
            }
        },
        {
            "name": "Anderson Silva",
            "company": "MMA.com",
            "email_address": "anderson.silva@mma.com",
            "attended": true,
            "invited_by": "Visitor: Jim Taylor",
            "_links": {
                "registration": { "href" : "/events/{event_id}/registrations/{registration_id}" },
                "inviter": { "href" : "/events/{event_id}/registrations/{registration_id}" }
            }
        },
        {
            "name": "BJ Penn",
            "company": "MMA.com",
            "email_address": "bj.penn@mma.com",
            "attended": false,
            "invited_by": "",
            "_links": {
                "registration": { "href" : "/events/{event_id}/registrations/{registration_id}" }
            }
        }  
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/registrations" }
    }
}
    

--
Event > Seminars
Methods to create, retrieve, update and delete seinars from an event. The following methods are available

* Create a new seminar
* Retrieve a collection of seminars for an event
* Retrieve an individual seminar for an event
* Update a seminar
* Delete a seminar
--

Create a new seminar

_Authentication:__ Required

__Authorization:__ The caller must be the owner or administrator of the specified event

__Required parameters:__ 

* event\_day\_id (Integer) *The id of the event day that the seminar is taking place on*
* seminar (String) *The name of the seminar*
* start\_time (Time - String) [Format: HH:MM] *The start time of the seminar*
* end\_time (Time - String) [Format: HH:MM] *The end time of the seminar*

__Optional parameters:__ 

* speaker (String) *The name of the person/company presenting the seminar*

POST /events/{event_id}/seminars
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "event_day_id": 1,
    "seminar": "The Art of Kung Fu",
    "speaker": "Jackie Chan",
    "start_time": "11:00:00",
    "end_time": "11:45:00"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_event_seminar_id": 1,
    "seminar": "The Art of Kung Fu",
    "speaker": "Jackie Chan",
    "start_time": "11:00:00",
    "end_time": "11:45:00",
    "_event_day": {
        "_event_day_id": 1,
        "date": "2013-06-16"
    },
    "_links":{
        "self": { "href" : "/events/{event_id}/seminars/{seminar_id}" }
    }
}


Retrieve a collection of seminars for an event

_Authentication:__ Required

__Authorization:__ The caller must be a member of the specified event

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* day_id (Integer) *the ids of the event days you wish to filter by*

GET /events/{event_id}/seminars{?start,limit,day_id*}
> Content-Type: application/json
> Authorization: Basic {your encoded token
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "seminars": [
        {
            "_event_seminar_id": 1,
            "seminar": "The Art of Kung Fu",
            "speaker": "Jackie Chan",
            "start_time": "11:00:00",
            "end_time": "11:45:00",
            "_event_day": {
                "_event_day_id": 1,
                "date": "2013-06-16"
            },
            "_links":{
                "self": { "href" : "/events/{event_id}/seminars/{seminar_id}" }
            }
        },
        {
            "_event_seminar_id": 2,
            "seminar": "Cage Fighting 101",
            "speaker": "Bass Rutten",
            "start_time": "12:00:00",
            "end_time": "13:00:00",
            "_event_day": {
                "_event_day_id": 2,
                "date": "2013-06-17"
            },
            "_links":{
                "self": { "href" : "/events/{event_id}/seminars/{seminar_id}" }
            }
        }
    ]
}


Retrieve a single seminar for an event

_Authentication:__ Required

__Authorization:__ The caller must be a member of the specified event

GET /events/{event_id}/seminars/{seminar_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_event_seminar_id": 1,
    "seminar": "The Art of Kung Fu",
    "speaker": "Jackie Chan",
    "start_time": "11:00:00",
    "end_time": "11:45:00",
    "_event_day": {
        "_event_day_id": 1,
        "date": "2013-06-16"
    },
    "_links":{
        "self": { "href" : "/events/{event_id}/seminars/{seminar_id}" }
    }
}


Update a seminar

_Authentication:__ Required

__Authorization:__ The caller must be the owner or administrator of the specified event

PUT /events/{event_id}/seminars/{seminar_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "event_day_id": 1,
    "seminar": "The Art of Kung Fu",
    "speaker": "Jet Lee",
    "start_time": "12:00:00",
    "end_time": "12:45:00"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "_event_seminar_id": 1,
    "seminar": "The Art of Kung Fu",
    "speaker": "Jet Lee",
    "start_time": "12:00:00",
    "end_time": "12:45:00",
    "_event_day": {
        "_event_day_id": 1,
        "date": "2013-06-16"
    },
    "_links":{
        "self": { "href" : "/events/{event_id}/seminars/{seminar_id}" }
    }
}


Delete an event seminar

_Authentication:__ Required

__Authorization:__ The caller must be the owner or administrator of the specified event

DELETE /events/{event_id}/seminars/{seminar_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Event > Seminars > Attendances
Methods for seminar attendances.

* Mark a user as having attended a seminar
--

Mark a user as having attended a seminar
__Authentication:__ Required

__Authorization:__ Must be a door scanner

__Required parameters:__ 

* qr_code (string)
* attendance time (Time - String) [Format: HH:MM:SS

POST /events/{event_id}/seminars/{seminar_id}/attendances
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "qr_code": "12434-12414-asdsa1-123123",
    "attendance_time": "2013-06-30T13:21:55Z"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "date": "2013-06-30T13:21:55Z",
    "user": {
        "first_name": "Forrest",
        "last_name": "Griffin",
        "email": "forest-griffin@cagefighter.com"
    }
}


Get a list of users who have attended a seminar

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the event

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* start_time (String) [Format: YYYY-MM-DDTHH:MM:SSZ (RFC 3339)] *the start time to filter by*
* end_time (String) [Format: YYYY-MM-DDTHH:MM:SSZ (RFC 3339)] *the end time to filter by*

GET /events/{event_id}/seminars/{seminar_id}attendances{start,limit,start_time,end_time}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "attendances": [
        {
            "date": "2013-06-30T13:21:55Z",
            "user": {
                "first_name": "Forrest",
                "last_name": "Griffin",
                "email": "forest-griffin@cagefighter.com"
            },
            "_links":{
                "self": { "href" : "/events/{event_id}/seminars/{seminar_id}/attendances/{attendance_id}" }
            }
        },
        {
            "date": "2013-06-30T14:02:16Z",
            "user": {
                "first_name": "John",
                "last_name": "Jones",
                "email": "john-jones@cagefighter.com"
            },
            "_links":{
                "self": { "href" : "/events/{event_id}/seminars/{seminar_id}/attendances/{attendance_id}" }
            }
        }
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/attendances" }
    }
}


Get an individual seminaratendance

__Authentication:__ Required

__Authorization:__ The caller must be a staff member of the event

GET /events/{event_id}/seminars/{seminar_id}/attendances/{attendance_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "date": "2013-06-30T13:21:55Z",
    "user": {
        "first_name": "Forrest",
        "last_name": "Griffin",
        "email": "forest-griffin@cagefighter.com"
    },
    "door_id": 10,
    "_links":{
        "self": { "href" : "/events/{event_id}/seminars/{seminar_id}/attendances/{attendance_id}" }
    }
}


--
Event > Staff
Methods for working with Staff for events. The following methods are available:

* Retrieve a collection of staff for an event
* Retrieve an individualstaff member for an event
* Update a staff member
* Delete a staff member
--

Retrieve a collection of staff for an event

_Authentication:__ Required

__Authorization:__ The caller must be staff member of the specified event

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* order(String) *the order in which the results should be displayed. Acceptable values are __firstasc__, __firstdesc__, __lastasc__, __lastdesc__*,
* type (String) *filter by the type of staff member. Acceptable values are __owner__, __admin__ and __member__.*

GET /events/{event_id}/staff{?start,limit,order,type*}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "staff": [
        { 
            "type": "owner",
            "user" : {
                "first_name": "Bruce",
                "last_name": "Lee",
                "email": "bruce.lee@kickass.com"
            },
            "_links": {
                "self": { "href": "/events/{event_id}/staff/{user_id}" }
            }
        },
        { 
            "type": "member",
            "user" : {
                "first_name": "Chuck",
                "last_name": "Norris",
                "email": "chuck.norris@kickass.com"
            },
            "_links": {
                "self": { "href": "/events/{event_id}/staff/{user_id}" }
            }
        }
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/staff" }
    }
}


Retrieve an individual staff member for an event

_Authentication:__ Required

__Authorization:__ The caller must be staff member of the specified event

GET /events/{event_id}/staff/{user_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{ 
    "type": "admin",
    "user" : {
        "first_name": "Bruce",
        "last_name": "Lee",
        "email": "bruce.lee@kickass.com"
    },
    "_links": {
        "self": { "href": "/events/{event_id}/staff/{user_id}" }
    }
}


Update a staff member

_Authentication:__ Required

__Authorization:__ The caller must be the owner or administrator of the specified event

__Optional parameters:__

* type (String) *the users user type affects functions available to them. Allowed values are __admin__ and __member__*. 

__Note:__ The user with type __owner__ cannot be changed.

PUT /events/{event_id}/staff/{user_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "type": "admin"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{ 
    "type": "admin",
    "user" : {
        "first_name": "Bruce",
        "last_name": "Lee",
        "email": "bruce.lee@kickass.com"
    },
    "_links": {
        "self": { "href": "/events/{event_id}/staff/{user_id}" }
    }
}


Delete a staff member

_Authentication:__ Required

__Authorization:__ The caller must be the owner or administrator of the specified event

DELETE /events/{event_id}/staff/{user_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Event > Staff Invites
Methods for Staff Invites. The following methods are available:

* Create a new staff invite
* Retrieve a collection of staff invites for an event
* Retrieve a single staff invite for an event
* Revoke (Delete) a staff invite for an event
--

Create a new staff invite

__Authentication:__ Required

__Authorization:__ The user must be an admin or owner of the event they are requesting

__Required parameters:__

* email\_address (String) *the email address of the person you wish to invite*
* level (String) *the user level that the invitee will have when joining the team. Accepted values are __admin__ or __member__*

__Optional paramters:__

* message (String) *an optional message to send to the user with the invite*

POST /events/{event_id}/staff_invites
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "email_address": "jet.lee@kickass.com",
    "type": "member",
    "message": "Hi Jet, I'm organizing the Kick Ass Kung Fu event, join my team so we can work together!"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "email_address": "jet.lee@kickass.com",
    "type": "member",
    "message": "Hi Jet, I'm organizing the Kick Ass Kung Fu event, join my team so we can work together!",
    "status": "pending",
    "_links":{
        "self": { "href" : "/events/{event_id}/staff_invites/{staff_invite_id" }
    }
}


Retrieve a collection of staff invites for an event

__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the event they are requesting

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* status (String) *filter by the status of the invite. Acceptable values are __pending, __accepted__ and __declined__*,
* type (String) *filter by the type of staff member. Acceptable values are __owner__, __admin__ and __member__.*

GET /events/{event_id}/staff_invites{?start,limit,status*,type*}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "staff_invites": [
        {
            "name": "Jet Lee",
            "email_address": "jet.lee@kickass.com",
            "type": "member",
            "message": "Hi Jet, I'm organizing the Kick Ass Kung Fu event, join my team so we can work together!",
            "status": "pending",
            "_links": {
                "self": { "href" : "/events/{event_id}/staff_invites/{staff_invite_id" }
            }
        },  
        {
            "name": "Bruce Willis",
            "email_address": "bruce.willis@kickass.com",
            "type": "member",
            "message": "Hi Bruce, I'm organizing the Kick Ass Kung Fu event, join my team so we can work together!",
            "status": "pending",
            "_links": {
                "self": { "href" : "/events/{event_id}/staff_invites/{staff_invite_id" }
            }
        }
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/staff_invites" }
    }
}


Retrieve a single staff invite for an event

__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the event they are requesting

GET /events/{event_id}/staff_invites/{staff_invite_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "name": "Jet Lee",
    "email_address": "jet.lee@kickass.com",
    "type": "member",
    "message": "Hi Jet, I'm organizing the Kick Ass Kung Fu event, join my team so we can work together!",
    "status": "pending",
    "_links":{
        "self": { "href" : "/events/{event_id}/staff_invites/{staff_invite_id" }
    }
}


Revoke (Delete) a staff invite

__Authentication:__ Required

__Authorization:__ The user must be a admin or owner of the event they are requesting

__Note:__ Only *__pending__* invites can be revoked, if the user has already accepted the invite, you will have to delete the user from the event.

DELETE /events/{event_id}/staff_invites/{staff_invite_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Event > State

* Get the current state of an event
* Update the current state of an event
--

Get the state of an event

__Authentication:__ Required

__Authorization:__ The user must be a staff member of the event they are requesting

GET /events/{event_id}/state
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "name": "created",
    "_links": {
        "self": {
            "href": "/events/2/state"
        }
    }
}


Update the state of an event

__Authentication:__ Required

__Authorization:__ The user must be a staff admin or owner of the event they are requesting

__Required parameters:__

* name (String) _the name of the state that you wish to switch the event to (See EventStates)_

PUT /events/{event_id}/state
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "name": "published"
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "name": "published",
    "_links": {
        "self": {
            "href": "/events/2/state"
        }
    }
}


--
Event > Teams

* Get a list of teams at an event
--

Get a list of teams at an event

__Authentication:__ Required

__Authorization:__ The user must be a staff member of the event they are requesting

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* order (String) *order the results alphabetically on team name. Acceptable values are __asc__ or __desc__*

GET /events/{event_id}/teams{?start,limit,order}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "teams": [
        {
            "_team_id": 1,
            "name": "Lets Lynk Ltd",
            "type": "standard",
            "owner": {
                "user": {
                    "name": "Bruce Lee"
                }
            }
        },
        {
            "_team_id": 2,
            "name": "Bodswap",
            "type": "standard",
            "owner": {
                "user": {
                    "name": "Jamie Vaughan"
                }
            }
        }
    ],
    "_links":{
        "self": { "href" : "/events/{event_id}/teams" }
    }
}


Delete a team from an event

__Authentication:__ Required

__Authorization:__ The user must be an owner or administrator of the event they are requesting

DELETE /events/{event_id}/teams/{team_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Event > Team Invites

* Create a new event team invite
* Retrieve a list of event team invites
* Retrieve a single event team invite
* Revoke (Delete) an event team invite
--

Create a new event team invite

__Authentication:__ Required

__Authorization:__ The user must be an owner or administrator of the event they are requesting

__Required parameters:__

* team_name (String)
* email_address (String)

__Optional parameters:__

* name (String)
* message (String)

POST /events/{event_id}/team_invites
> Content-Type: application/json
> Authorization: Basic {your encoded token}
{
    "team_name": "MMA Tag Team",
    "name": "Chuck Liddel",
    "email_address": "chuck.liddel@mma.com",
    "message": "Come and exhibit at my awesome event!"
}
< 201
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "team_name": "MMA Tag Team",
    "name": "Chuck Liddel",
    "date": "2013-06-30T13:21:55Z",
    "email_address": "chuck.liddel@mma.com",
    "message": "Come and exhibit at my awesome event!",
    "status": "pending",
    "_links":{
        "self": { "href" : "/events/{event_id}/team_invites/{event_team_invite_id}" }
    }
}


Retrieve a list of team invites

__Authentication:__ Required

__Authorization:__ The user must be an owner or administrator of the event they are requesting

__URI filters:__

* start (Integer) *the item number to start from*
* limit (Integer) *the maximum number of items to display*
* status (String) *filter by the status of the invite. Acceptable values are __pending, __accepted__ and __declined__*

GET /events/{event_id}/team_invites{?start,limit,status*}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{    
    "team_invites":[
        {
            "team_name": "MMA Tag Team",
            "name": "Chuck Liddel",
            "date": "2013-06-30T13:21:55Z",
            "email_address": "chuck.liddel@mma.com",
            "message": "Come and exhibit at my awesome event!",
            "status": "pending",
            "_links":{
                "self": { "href" : "/events/{event_id}/team_invites/{event_team_invite_id}" }
            }
        },
        {
            "team_name": "Beer Team",
            "name": "Tom Wolfe",
            "date": "2012-07-10T08:41:03Z",
            "email_address": "tom.wolfe@beer.com",
            "message": "Come and exhibit at my awesome event!",
            "status": "pending",
            "_links":{
                "self": { "href" : "/events/{event_id}/team_invites/{event_team_invite_id}" }
            }
        }
    ]
}


Retrieve a single event team invite

__Authentication:__ Required

__Authorization:__ The user must be an owner or administrator of the event they are requesting

GET /events/{event_id}/team_invites/{event_team_invite_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "team_name": "MMA Tag Team",
    "name": "Chuck Liddel",
    "date": "2013-06-30T13:21:55Z",
    "message": "Come and exhibit at my awesome event!",
    "status": "pending",
    "_links":{
        "self": { "href" : "/events/{event_id}/team_invites/{event_team_invite_id}" }
    }
}


Revoke (Delete) an event team invite

__Authentication:__ Required

__Authorization:__ The user must be an owner or administrator of the event they are requesting

DELETE /events/{event_id}/team_invites/{event_team_invite_id}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 204
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT


--
Event > Type

* Get the current type of an event
* Update the current type of an event

--

Get the type of an event

__Authentication:__ Required

__Authorization:__ The user must be a staff member of the event they are requesting

GET /events/{event_id}/type
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "name": "free",
    "label": "Free",
    "registrations": 100,
    "price": 0
    "_links": {
        "self": {
            "href": "/events/1/type"
        }
    }
}


Update the state of an event

__Authentication:__ Required

__Authorization:__ The user must be a staff admin or owner of the event they are requesting

__Required parameters:__

* name (String) _the name of the state that you wish to switch the event to (See Event Types)_

__Optional parameters:__ 

If the user opts to update to a paid event for type they will also need to provide the following credit card information:

* credit_card (see format below): 

    {
        "number": <<encrypted>>,
        "cvv": <<encrypted>>,
        "expiration_month": <<encrypted>>,
        "expiration_year": <<encrypted>>
    }
    
All credit card fields will be encrypted with Braintree's client side encryption methods. More info at `https://www.braintreepayments.com`

PUT /events/{event_id}/type
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
{
    "name": "tier1",
    "credit_card": {
        "number": "<<encrypted>>",
        "cvv": "<<encrypted>>",
        "expiration_month": "<<encrypted>>",
        "expiration_year": "<<encrypted>>"
    }
}
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "name": "tier1",
    "label": "Small",
    "registrations": 500,
    "price": 100
    "_links": {
        "self": {
            "href": "/events/1/type"
        }
    }
}
+++++
< 402
< Content-Type: application/json
{
    "error": "There was a problem processing your credit card, please double check your data and try again"
}


--
Event > Stats > Registration > Combo

Methods available:

* Retrieve event registation stats
--

Retrieve event registation stats

__Authentication:__ Required

__Authorization:__ The user must be a member of the event they are requesting

__Required parameters:__

__Optional parameters:__

* day (Int)

GET /events/{event_id}/stats/registration/combo{?day}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "total": 282,
    "day_average": 12,
    "allowance": {
        "used": 200,
        "not_used": 2000,
        "percentage_used": 9.1
    },
    "invites": {
        "accepted": 309,
        "not_accepted": 983,
        "percentage_accepted": 26
    },
    "over_time": {
        "2013-06-05": 2,
        "2013-06-06": 4,
        "2013-06-07": 5,
        "2013-06-08": 11,
        "2013-06-09": 8,
        "2013-06-10": 14,
        "2013-06-11": 17,
        "2013-06-12": 30,
        "2013-06-13": 24,
        "2013-06-14": 16,
        "2013-06-15": 18,
        "2013-06-16": 6,
        "2013-06-17": 5,
        "2013-06-18": 2
    }
}


--
Event > Stats > Attendance > Combo

Methods available:

* Retrieve event attendance stats
--

Create a new event team invite

__Authentication:__ Required

__Authorization:__ The user must be a member of the event they are requesting

__Required parameters:__

__Optional parameters:__

* day (Int)

GET /events/{event_id}/stats/attendance/combo{?day}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "total": 206,
    "unique": 159,
    "attended": {
        "yes": 56,
        "no": 44
    },
    "per_door": {
        "West": 254,
        "North": 420,
        "East": 73
    },
    "per_hour": {
        "09:00": 30,
        "10:00": 37,
        "11:00": 68,
        "12:00": 40,
        "13:00": 25,
        "14:00": 26,
        "15:00": 17,
        "16:00": 9,
        "17:00": 4
    },
    "per_door_per_hour": {
        "West": {
            "09:00": 30,
            "10:00": 37,
            "11:00": 68,
            "12:00": 40,
            "13:00": 25,
            "14:00": 26,
            "15:00": 17,
            "16:00": 9,
            "17:00": 4
        },
        "North": {
            "09:00": 12,
            "10:00": 18,
            "11:00": 42,
            "12:00": 107,
            "13:00": 38,
            "14:00": 46,
            "15:00": 3,
            "16:00": 7,
            "17:00": 0
        },
        "East": {
            "09:00": 0,
            "10:00": 0,
            "11:00": 0,
            "12:00": 40,
            "13:00": 22,
            "14:00": 11,
            "15:00": 0,
            "16:00": 0,
            "17:00": 0
        }
    }
}


--
Event > Stats > Connection > Combo

Methods available:

* Retrieve event connection stats
--

__Authentication:__ Required

__Authorization:__ The user must be a member of the event they are requesting

__Required parameters:__

__Optional parameters:__

* day (Int)

GET /events/{event_id}/stats/connection/combo{?day}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "total": 282,
    "average": 4.2,
    "per_hour": {
        "09:00": 30,
        "10:00": 37,
        "11:00": 68,
        "12:00": 40,
        "13:00": 25,
        "14:00": 26,
        "15:00": 17,
        "16:00": 9,
        "17:00": 4
    },
    "table": {
        "average": 8,
        "teams": {
            "Bodswap": {
                "connections": 16,
                "change": 100
            },
            "IBM": {
                "connections": 12,
                "change": 50
            },
            "Microsoft": {
                "connections": 8,
                "change": 0
            },
            "Samsung": {
                "connections": 4,
                "change": -50
            },
            "Sony": {
                "connections": 2,
                "change": -75
            }
        }
    }
}


--
Event > Stats > Goodies > Combo

Methods available:

* Retrieve goodie connection stats
--

__Authentication:__ Required

__Authorization:__ The user must be a member of the event they are requesting

__Required parameters:__

__Optional parameters:__

* day (Int)

GET /events/{event_id}/stats/goodies/combo{?day}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "total": 873,
    "average": 7.5,
    "per_hour": {
        "09:00": 30,
        "10:00": 37,
        "11:00": 68,
        "12:00": 40,
        "13:00": 25,
        "14:00": 26,
        "15:00": 17,
        "16:00": 9,
        "17:00": 4
    },
    "types": {
        "video": 8,
        "image": 13,
        "document": 9,
        "website": 2
    }
}


--
Event > Stats > Seminar > Combo

Methods available:

* Retrieve seminar stats
--

__Authentication:__ Required

__Authorization:__ The user must be a member of the event they are requesting

__Required parameters:__

__Optional parameters:__

* day (Int)

GET /events/{event_id}/stats/seminar/combo{?day}
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "total": 202,
    "average": 50.3,
    "seminars": {
        "Keynote Speech": 76,
        "Kung Fu Seminar": 37,
        "MMA Seminar": 68,
        "Jujitsu Seminar": 40
    },
    "registered": {
        "attended": 60,
        "not_attended": 40
    }
}


--
Tag Icons

* Retreive a list of tag icons
--

Retrieve a list of tag icons

__Authentication:__ Required

__Authorization:__ No extra authorization required

GET /tag_icons
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "tag_icons": [
        {
            "icon_id": 1,
            "icon_name": "Email",
            "icon_url": "email.png"
        },
        {
            "icon_id": 2,
            "icon_name": "Telephone",
            "icon_url": "telephone.png"
        }
    ]
}


--
Tag Colours

* Retreive a list of tag colours
--

Retrieve a list of tag colours

__Authentication:__ Required

__Authorization:__ No extra authorization required

GET /tag_colours
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "tag_colours": [
        {
            "name": "blue",
            "hex": "10B8D5"
        },
        {
            "name": "purple",
            "hex": "B264A5"
        },
        {
            "name": "orange",
            "hex": "F27935"
        },
        {
            "name": "yellow",
            "hex": "ECBD40"
        },
        {
            "name": "green",
            "hex": "47B569"
        },
        {
            "name": "red",
            "hex": "F7686B"
        }
    ]
}


--
Goodie Types

* Retreive a list of goodie types
--

Retrieve a list of goodie types

__Authentication:__ Required

__Authorization:__ No extra authorization required

GET /goodie_types
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
[
    {
        "name": "video",
        "label": "Video"
    },
    {
        "name": "document",
        "label": "Document"
    },
    {
        "name": "image",
        "label": "Image"
    },
    {
        "name": "website",
        "label": "Website"
    }
]


--
Question Types

* Retreive a list of question types
--

Retreive a list of question types

__Authentication:__ Required

__Authorization:__ No extra authorization required

GET /question_types
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "question_types": [
        {
            "name": "text",
            "label": "Text"
        },
        {
            "name": "radio",
            "label": "Radio Select"
        },
        {
            "name": "checkbox",
            "label": "Checkbox Select"
        },
        {
            "name": "select",
            "label": "Dropdown"
        },
        {
            "name": "text_area",
            "label": "Text Area"
        }
    ],
    "_links": {
        "self": {
            "href": "/question_types"
        }
    }
}


--
Invitation Types

* Retreive a list of invitation types
--

Retreive a list of invitation types

__Authentication:__ Required

__Authorization:__ No extra authorization required

GET /invitation_types
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "invitation_types": [
        {
            "name": "team_create",
            "label": "Create Team"
        },
        {
            "name": "team_join",
            "label": "Join Team"
        },
        {
            "name": "event_visit",
            "label": "Attend Event"
        },
        {
            "name": "event_staff",
            "label": "Join Event Staff"
        }
    ]
}


--
Team Staff Types

* Retreive a list of team staff types
--

Retreive a list of team staff types

__Authentication:__ Required

__Authorization:__ No extra authorization required

GET /team_staff_types
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "team_staff_types": [
        {
            "name": "admin",
            "label": "Admin"
        },
        {
            "name": "member",
            "label": "Member"
        }
    ]
}


--
Event Staff Types

* Retreive a list of event staff types
--

Retreive a list of event staff types

__Authentication:__ Required

__Authorization:__ No extra authorization required

GET /event_staff_types
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "event_staff_types": [
        {
            "name": "owner",
            "label": "Owner"
        },
        {
            "name": "admin",
            "label": "Admin"
        },
        {
            "name": "member",
            "label": "Member"
        }
    ]
}


--
Event Types

* Retreive a list of event types
--

Retreive a list of event types

__Authentication:__ Required

__Authorization:__ No extra authorization required

GET /event_types
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "event_types": [
        {
            "name": "free",
            "label": "Free",
            "registrations": 100,
            "price": 0
        },
        {
            "name": "tier1",
            "label": "small",
            "registrations": 500,
            "price": 100
        },
        {
            "name": "tier2",
            "label": "medium",
            "registrations": 1000,
            "price": 200
        }
    ]
}


--
Event States

* Retreive a list of event states
--

Retreive a list of event states

__Authentication:__ Required

__Authorization:__ No extra authorization required

GET /event_states
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "event_states": [
        "created",
        "published",
        "cancelled"
    ]
}


--
Avatars

* Retreive a list of default avatars
--

Retreive a list of default avatars

__Authentication:__ Required

__Authorization:__ No extra authorization required

GET /avatars
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "avatars": [
        {
            "avatar_id": 1,
            "_links": {
                "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
            }
        },
        {
            "avatar_id": 2,
            "_links": {
                "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
            }
        },
        {
            "avatar_id": 3,
            "_links": {
                "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
            }
        }
    ]
}


--
Timezones

* Retreive a list supported timezones
--

Retreive a list supported timezones

__Authentication:__ Required

__Authorization:__ No extra authorization required

GET /timezones
> Content-Type: application/json
> Authorization: Basic {your encoded token}
> If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
< 200
< Content-Type: application/json
< Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
{
    "timezones": [
        "Africa/Abidjan",
        "Africa/Accra",
        "Africa/Addis_Ababa",
        "Africa/Algiers",
        "Africa/Asmara",
        "Africa/Bamako",
        "Africa/Bangui",
        "Africa/Banjul",
        "Africa/Bissau",
        "Africa/Blantyre",
        "Africa/Brazzaville",
        "Africa/Bujumbura",
        "Africa/Cairo",
        "Africa/Casablanca",
        "Africa/Ceuta",
        "Africa/Conakry",
        "Africa/Dakar",
        "Africa/Dar_es_Salaam",
        "Africa/Djibouti",
        "Africa/Douala",
        "Africa/El_Aaiun",
        "Africa/Freetown",
        "Africa/Gaborone",
        "Africa/Harare",
        "Africa/Johannesburg",
        "Africa/Juba",
        "Africa/Kampala",
        "Africa/Khartoum",
        "Africa/Kigali",
        "Africa/Kinshasa",
        "Africa/Lagos",
        "Africa/Libreville",
        "Africa/Lome",
        "Africa/Luanda",
        "Africa/Lubumbashi",
        "Africa/Lusaka"
    ]
}


--
Door Scanner Auth
A special auth for the door scanner to associate with an event.

Steps to authenticate:

1. `POST` your credentials (event_token) to __/door_scanner_auth__.
2. __/door_scanner_auth__ will resond with a __token__
3. Pass the token back in subsequent requests in the Authorization Header using Basic 
authorization, for example:

    `Authorization: Basic QkR6cFhHSHpnNkIyMk16bzlGNm1POWNKSTJpT0VSMWo1cnkxaERuUnN0RWdNVWZNcThYR1o4MTduUVRwTWZ4Qjo=`

Parameters:

* event_token (string): The secret event token - __required__

Response:

A successful response will contain a token to use in subsequent requests

--
Login to the API for door scanner priveldges

POST /door_scanner_auth
> Content-Type: application/json
{ 
    "event_token": "550e8400-e29b-41d4-a716-446655440000", 
}
< 200
< Content-Type: application/json
{ 
    "_event_id": 1,
    "token" : "QkR6cFhHSHpnNkIyMk16bzlGNm1POWNKSTJpT0VSMWo1cnkxaERuUnN0RWdNVWZNcThYR1o4MTduUVRwTWZ4Qjo=", 
}
