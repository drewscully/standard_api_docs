FORMAT: 1A

# Lets Lynk API Documentation

## Introduction

LetsLynk API is based on REST principles, in order to use the api you need a Lets Lynk account. 
The following documentation covers core resources that are available to query the lets lynk 
system and manipulate data.

All API methods return expect to have parameters passsed as JSON and will return resources as JSON.
Please see specific examples for further detail.

### Allowed HTTP requests:

    POST   :   To create a resource
    PUT    :   To replace a resource
    GET    :   Get a resource or a list of resources
    DELETE :   To delete a resource

### Description of usual server responses

* `200 OK`- the request was successful
* `201 Created` - the request was successful and a resource was created
* `204 No Content` - the request was successful but there is no representation to return
* `400 Bad Request` - the request could not be understolld or was missing required parameters
* `401 Unauthorized` - authenication failed or the user doesn't have permissions for the requested operation
* `403 Forbidden` - access to the requested resource denied
* `404 Not Found` - the requested resource could not be found
* `409 Conflict` - the request could not be actioned as it would result in a conflict with another resource
* `500 Internal Server Error` - There was an uncaught exception in the api, please email `support@letslynk.com`

### Collections of Objects

Methods that return collections of objects can be specified to return a set ammount of objects from a set place. This is achieved using the start and limit URI parameters.

For example: `GET /users/1/activity?start=20&limit=10`

In the above example, the server will return up to 10 objects, starting from the 20th object. 
The json response will also include a hypermedia link to get the next set of objects (and the previous set, if applicable):

    {
        ...
        "_links":{
            "self": { "href": "/users/1/activity?start=20&limit=10" },
            "prev": { "href": "/users/1/activity?start=10&limit=10" },
            "next": { "href": "/users/1/activity?start=30&limit=10" }
        }
        ...
    }
If other uri parameters are set in a request, they will be carried through to the hypermedia links in the response. 

For example: `GET /users/1/contacts?start=20&limit=10&search=John&tag=1&tag=3`

    {
        ...
        "_links":{
            "self": { "href": "/users/1/contacts?start=20&limit=10&search=John&tag=1&tag=3" },
            "prev": { "href": "/users/1/contacts?start=10&limit=10&search=John&tag=1&tag=3" },
            "next": { "href": "/users/1/contacts?start=30&limit=10&search=John&tag=1&tag=3" }
        }
        ...
    }

## Endpoints

### Status [/]

The API status and version

#### Get Status [GET]

+ Response 200 (application/json)

    + Body

            {
                "status": "OK", 
                "version": 1
            }

### Auth [/auth]

With the exception of creaing an account, you must first auth against the server using the email address 
and password associated with your account in order to use the API.

Steps to authenticate:

1. `POST` your credentials (email and password) to __/auth__
2. __/auth__ will resond with a __token__
3. Pass the token back in subsequent requests in the Authorization Header using Basic 
authorization, for example:

`Authorization: Basic QkR6cFhHSHpnNkIyMk16bzlGNm1POWNKSTJpT0VSMWo1cnkxaERuUnN0RWdNVWZNcThYR1o4MTduUVRwTWZ4Qjo=`

Parameters:
* email (string): The users email address - __required__
* password (string): The users password - __required__

Response:
A successful response will contain a token to use in subsequent requests and a hypermedia link to the root and the user's self
of the API.

#### Create auth token [POST]

+ Request (application/json)

    + Body
    
            { 
                "email": "steven.segal@kickass.com", 
                "password": "imjustthecook" 
            }

+ Response 200 (application/json)

    + Body
    
            {
                "token" : "QkR6cFhHSHpnNkIyMk16bzlGNm1POWNKSTJpT0VSMWo1cnkxaERuUnN0RWdNVWZNcThYR1o4MTduUVRwTWZ4Qjo=", 
                "_user_id" : 1,
                "_links": {
                    "root": { "href": "/" },
                    "self": { "href": "/users/{user_id}" }
                }
            }

### Request Password Reset [/auth/forgot]

Supply the user email in the case of a forgotten/lost password. If the account is found then a password
reset link will be sent to the user email address.

Parameters:
* email (string): The users email address - __required__

Response:
A successful response will return no content. User should check their email to continue process.

#### Forgotten Password Request [POST]

+ Request (application/json)

    + Body
    
            { 
                "email": "steven.segal@kickass.com" 
            }

+ Response 200 (application/json)

    + Body
    
            {
                "message": "Check your email"
            }
            
+ Response 404 (application/json)

    + Body
    
            {
                "error": "The email specified could not be found"
            }


### Reset Password [/auth/reset]

Supply the reset ID that was generated by the API and sent to the user's email address along with
a new password.

Parameters:
* reset_token (string): The unique code sent to the user's email address - __required__
* password (string): The new password chosen by the user - __required__

#### Reset Password [POST]

+ Request (application/json)

    + Body
    
            { 
                "reset_token": "VM8DhE3aJ7PTgWQu6QSEvlKTmxdWk8s8v",
                "password": "this_is_a_very_poor_passphrase"
            }

+ Response 200 (application/json)

    + Body
    
            { 
                "message": "Password reset"
            }
            
+ Response 404 (application/json)

    + Body
    
            {
                "error": "Password reset request not found"
            }

### Verify Email Address [/verify]

On account creation an email verification is automatically generated and sent to the users 
supplied email address.

Use this API to complete the verification process by supplying the verification_token within
2 hours of it's generation

Parameters:
* verification_token (string): The unique code sent to the user's email address - __required__

Response:
A successful response will contain a hypermedia link to login.

#### Verify Email Address [POST]

+ Request (application/json)

    + Body
    
            { 
                "verification_token": "VM8DhE3aJ7PTgWQu6QSEvlKTmxdWk8s8v"
            }

+ Response 200 (application/json)

    + Body
    
            { 
                "_links": {
                    "auth": {
                        "href": "/auth"
                    }
                }
            }

### Send Verification Email [/verify/send]

Resends the verification email to a user.

Response:
A successful response will return no content.

#### Send Verification Email [POST]

+ Request (application/json)

    + Body
    
            { 
                "email": "email@email.com"
            }

+ Response 204

### User [/users/{id}]

A user of LetsLynk

Properties:
* email (string)
* password (string)
* title (string)
* first_name (string)
* last_name (string)
* full_name (string)
* home_telephone (string)
* mobile_telephone (string)
* work_telephone (string)there 
* linked_in (string)
* facebook (string)
* twitter (string)
* google (string)
* company (string)
* job_title (string)
* address\_line_1 (string)
* address\_line_2 (string)
* address\_line_3 (string)
* address\_line_4 (string)
* locality (string)
* region (string)
* postcode (string)
* country (string)
* _qr_url (string) _read only_
* _avatar (string) _read only_
* _banner (string) _read only_

#### Get a user [GET]

__Authentication:__ Required
__Authorization:__ The caller must be authorized as the owner of the requested resource 

+ Request (application/json)

    + Headers
    
            Authorization: Basic {your encoded token}
            If-Modified-Since: Fri, 12 Nov 2013 12:45:26 GMT
            
    + Body

            {
                "email": "stevensegal@kickass.com",
                "title": "Mr",
                "first_name": "Steven",
                "last_name": "Segal",
                "home_telephone": "04444 123 456",
                "mobile_telephone": "05555 123 456",
                "work_telephone": "06666 123 456",
                "linked_in": "http://linked.in/steven_segal",
                "facebook": "http://facebook.com/stevan_segal",
                "twitter": "@steven_segal",
                "google": "+steven_segal",
                "company": "Kick Ass Ltd",
                "job_title": "Ass Kicker",
                "address_line_1": "Address 1",
                "address_line_2": "Address 2",
                "address_line_3": "Address 3",
                "address_line_4": "Address 4",
                "locality": "NY",
                "region": "NY",
                "postcode": "K1KA55",
                "country": "USA",
                "_qr_url": "https://qr.letslynk.com/u/oO68mZwLTvi7bWu5vTgKEQ/Steven%20Segal",
                "_links": {
                    "avatar": {
                        "_links": {
                            "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                            "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                            "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                            "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                            "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                            "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                            "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                        }
                    },
                    "banner": {
                        "_links": {
                            "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                            "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                            "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                            "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                            "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                            "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                            "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                            "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                            "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                        }
                    },
                    "self": { "href": "/users/{user_id}" },
                    "activity": { "href": "/users/{user_id}/activity" },
                    "contacts": { "href": "/users/{user_id}/contacts" },
                    "invites": { "href": "/users/{user_id}/invites" },
                    "goodie": { "href": "/users/{user_id}/goodie" },
                    "registrations": { "href": "/users/{user_id}/registrations" },
                    "teams": { "href": "/users/{user_id}/teams" },
                    "tags": { "href": "/users/{user_id}/tags" }
                }
            }

+ Response 404 (application/json)

    + Body

            {
                "error": "The requested resource could not be found"
            }
            
            
#### Update User [PUT]

This method accepts a partial representation of a user containing one or more of the optional parameters

__Authentication:__ Required
__Authorization:__ The caller must be authorized as the owner of the requested resource 

+ Request (application/json)

    + Headers
    
            Authorization: Basic {your encoded token}
            If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
    
    + Body
    
            {
                "email": "stevensegal@kickass.com",
                "password": "kickass",
                "title": "Mr",
                "first_name": "Steven",
                "last_name": "Segal",
                "home_telephone": "04444 123 456",
                "mobile_telephone": "05555 123 456",
                "work_telephone": "06666 123 456",
                "linked_in": "http://linked.in/steven_segal",
                "facebook": "http://facebook.com/stevan_segal",
                "twitter": "@steven_segal",
                "google": "+steven_segal",
                "company": "Kick Ass Ltd",
                "job_title": "Ass Kicker",
                "address_line_1": "Address 1",
                "address_line_2": "Address 2",
                "address_line_3": "Address 3",
                "address_line_4": "Address 4",
                "locality": "NY",
                "region": "NY",
                "postcode": "K1KA55",
                "country": "USA"
            }
    
+ Response 200 (application/json)

    + Headers
    
            Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
    
    + Body
    
            {
                "email" : "stevensegal@kickass.com",
                "title" : "Mr",
                "first_name" : "Steven",
                "last_name" : "Segal",
                "home_telephone" : "04444 123 456",
                "mobile_telephone" : "05555 123 456",
                "work_telephone" : "06666 123 456",
                "linked_in" : "http://linked.in/steven_segal",
                "facebook" : "http://facebook.com/stevan_segal",
                "twitter" : "@steven_segal",
                "google" : "+steven_segal",
                "company" : "Kick Ass Ltd",
                "full_job_title" : "Ass Kicker at Kick Ass Ltd",
                "address_line_1" : "Address 1",
                "address_line_2" : "Address 2",
                "address_line_3" : "Address 3",
                "address_line_4" : "Address 4",
                "locality" : "NY",
                "region" : "NY",
                "postcode" : "K1KA55",
                "country" : "USA",
                "_qr_url": "https://qr.letslynk.com/u/oO68mZwLTvi7bWu5vTgKEQ/Steven%20Segal",
                "_links": {
                   "avatar": {
                        "_links": {
                            "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                            "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                            "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                            "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                            "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                            "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                            "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                        }
                    },
                    "banner": {
                        "_links": {
                            "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                            "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                            "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                            "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                            "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                            "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                            "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                            "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                            "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                        }
                    },
                    "self": { "href": "/users/{user_id}" },
                    "activity": { "href": "/users/{user_id}/activity" },
                    "contacts": { "href": "/users/{user_id}/contacts" },
                    "invites": { "href": "/users/{user_id}/invites" },
                    "goodie": { "href": "/users/{user_id}/goodie" },
                    "registrations": { "href": "/users/{user_id}/registrations" },
                    "teams": { "href": "/users/{user_id}/teams" },
                    "tags": { "href": "/users/{user_id}/tags" }
                }
            }
    
+ Response 400 (application/json)

    + Body
    
            { 
                "error": "The email and password cannot be empty"
            } 

+ Response 400 (application/json)

    + Body

            { 
                "error": "The email address is badly formatted"
            } 

+ Response 400 (application/json)

    + Body

            { 
                "error-1": "The field 'email' is required",
                "error-2": "The field 'flibble' is not supported"
            } 

+ Response 404 (application/json)

    + Body

            {
                "error": "The requested resource could not be found"
            }


+ Response 409 (application/json)

    + Body

            { 
                "error": "The email is already in use"
            } 

+ Response 409 (application/json)

    + Body
    
            { 
                "error": "Remote object out of date"
            }


#### Delete a User [DELETE]

__Authentication:__ Required
__Authorization:__ The caller must be authorized as the owner of the requested resource 

+ Request (application/json)

    + Headers
    
            Authorization: Basic {your encoded token}
            If-Unmodified-Since: Fri, 12 Nov 2013 12:45:26 GMT
    
+ Response 204
    
    + Headers
    
            Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT

+ Response 404 (application/json)

    + Body
    
            {
                "error": "The requested resource could not be found"
            }


### User Collection [/users]

#### Create a new user [POST]

__Authentication:__ Not required
__Authorization:__ Not required

+ Request (application/json)

    + Body
    
            { 
                "email": "stevensegal@kickass.com",
                "password": "kickass",
                "title": "Mr",
                "first_name": "Steven",
                "last_name": "Segal",
                "home_telephone": "04444 123 456",
                "mobile_telephone": "05555 123 456",
                "work_telephone": "06666 123 456",
                "linked_in": "http://linked.in/steven_segal",
                "facebook": "http://facebook.com/stevan_segal",
                "twitter": "@steven_segal",
                "google": "+steven_segal",
                "company": "Kick Ass Ltd",
                "job_title": "Ass Kicker",
                "address_line_1": "Address 1",
                "address_line_2": "Address 2",
                "address_line_3": "Address 3",
                "address_line_4": "Address 4",
                "locality": "NY",
                "region": "NY",
                "postcode": "K1KA55",
                "country": "USA"
            }

+ Response 201 (application/json)

    + Headers
            
            Last-Modified: Tue, 15 Nov 2013 12:45:26 GMT
            
    + Body
    
            { 
                "email": "stevensegal@kickass.com",
                "title": "Mr",
                "first_name": "Steven",
                "last_name": "Segal",
                "home_telephone": "04444 123 456",
                "mobile_telephone": "05555 123 456",
                "work_telephone": "06666 123 456",
                "linked_in": "http://linked.in/steven_segal",
                "facebook": "http://facebook.com/stevan_segal",
                "twitter": "@steven_segal",
                "google": "+steven_segal",
                "company": "Kick Ass Ltd",
                "job_title": "Ass Kicker",
                "address_line_1": "Address 1",
                "address_line_2": "Address 2",
                "address_line_3": "Address 3",
                "address_line_4": "Address 4",
                "locality": "NY",
                "region": "NY",
                "postcode": "K1KA55",
                "country": "USA",
                "_qr_url": "https://qr.letslynk.com/u/oO68mZwLTvi7bWu5vTgKEQ/Steven%20Segal",
                "_links": {
                    "avatar": {
                        "_links": {
                            "38": { "href": "https://i.letslynk.com/u/9fkoWokA/a/38.jpg" },
                            "50": { "href": "https://i.letslynk.com/u/9fkoWokA/a/50.jpg" },
                            "75": { "href": "https://i.letslynk.com/u/9fkoWokA/a/75.jpg" },
                            "100": { "href": "https://i.letslynk.com/u/9fkoWokA/a/100.jpg" },
                            "150": { "href": "https://i.letslynk.com/u/9fkoWokA/a/150.jpg" },
                            "200": { "href": "https://i.letslynk.com/u/9fkoWokA/a/200.jpg" },
                            "300": { "href": "https://i.letslynk.com/u/9fkoWokA/a/300.jpg" }
                        }
                    },
                    "banner": {
                        "_links": {
                            "320": { "href": "https://i.letslynk.com/u/9fkoWokA/b/320.jpg" },
                            "480": { "href": "https://i.letslynk.com/u/9fkoWokA/b/480.jpg" },
                            "612": { "href": "https://i.letslynk.com/u/9fkoWokA/b/612.jpg" },
                            "640": { "href": "https://i.letslynk.com/u/9fkoWokA/b/640.jpg" },
                            "720": { "href": "https://i.letslynk.com/u/9fkoWokA/b/720.jpg" },
                            "960": { "href": "https://i.letslynk.com/u/9fkoWokA/b/960.jpg" },
                            "1080": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1080.jpg" },
                            "1200": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1200.jpg" },
                            "1600": { "href": "https://i.letslynk.com/u/9fkoWokA/b/1600.jpg" }
                        }
                    },
                    "self": { "href": "/users/{user_id}" },
                    "activity": { "href": "/users/{user_id}/activity" },
                    "contacts": { "href": "/users/{user_id}/contacts" },
                    "invites": { "href": "/users/{user_id}/invites" },
                    "goodie": { "href": "/users/{user_id}/goodie" },
                    "registrations": { "href": "/users/{user_id}/registrations" },
                    "teams": { "href": "/users/{user_id}/teams" },
                    "tags": { "href": "/users/{user_id}/tags" }
                }
            }

+ Response 400 (application/json)

    + Body
    
            { 
                "error": "The email and password cannot be empty"
            } 

+ Response 400 (application/json)

    + Body
    
            { 
                "error": "The email address is badly formatted"
            }
            
+ Response 400 (application/json)

    + Body
    
            { 
                "error-1": "The field 'email' is required",
                "error-2": "The field 'flibble' is not supported"
            }
            
+ Response 409 (application/json

    + Body
    
            { 
                "error": "The email is already in use"
            }

